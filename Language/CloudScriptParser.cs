//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 CloudScriptParser.g 2012-04-30 12:22:01

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019

using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

using Language;

using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class CloudScriptParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CLASS", "FN", "IF", "ELSE", "WHILE", "END", "SELF", "NIL", "TRUE", "FALSE", "INTEGER", "FLOAT", "DIGIT", "NUMBER", "STRING", "LOWER", "ID_CHAR", "NAME", "UPPER", "CONSTANT", "URL_CHAR", "URL", "SEMICOLON", "COLON", "DOT", "COMMA", "OPEN_PARENT", "CLOSE_PARENT", "PRIV", "EQ", "LE", "GE", "LT", "GT", "PLUS", "MINUS", "MUL", "DIV", "MOD", "AND", "OR", "NOT", "ASSIGN", "NEWLINE", "COMMENT", "SPACE", "WHITESPACE", "LETTER"
	};
	public const int EOF=-1;
	public const int CLASS=4;
	public const int FN=5;
	public const int IF=6;
	public const int ELSE=7;
	public const int WHILE=8;
	public const int END=9;
	public const int SELF=10;
	public const int NIL=11;
	public const int TRUE=12;
	public const int FALSE=13;
	public const int INTEGER=14;
	public const int FLOAT=15;
	public const int DIGIT=16;
	public const int NUMBER=17;
	public const int STRING=18;
	public const int LOWER=19;
	public const int ID_CHAR=20;
	public const int NAME=21;
	public const int UPPER=22;
	public const int CONSTANT=23;
	public const int URL_CHAR=24;
	public const int URL=25;
	public const int SEMICOLON=26;
	public const int COLON=27;
	public const int DOT=28;
	public const int COMMA=29;
	public const int OPEN_PARENT=30;
	public const int CLOSE_PARENT=31;
	public const int PRIV=32;
	public const int EQ=33;
	public const int LE=34;
	public const int GE=35;
	public const int LT=36;
	public const int GT=37;
	public const int PLUS=38;
	public const int MINUS=39;
	public const int MUL=40;
	public const int DIV=41;
	public const int MOD=42;
	public const int AND=43;
	public const int OR=44;
	public const int NOT=45;
	public const int ASSIGN=46;
	public const int NEWLINE=47;
	public const int COMMENT=48;
	public const int SPACE=49;
	public const int WHITESPACE=50;
	public const int LETTER=51;

	public CloudScriptParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public CloudScriptParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return CloudScriptParser.tokenNames; } }
	public override string GrammarFileName { get { return "CloudScriptParser.g"; } }


	  /**
	    Run the parsing process and return the root node of the AST.
	  */
	  public Node parse() throws RecognitionException {
	    root_return result = root();
	    if (result == null) return null;
	    return result.nodes;
	  }
	  
	  // Override to throw exceptions on parse error.
	  @Override
	  public void reportError(RecognitionException e) {
	    throw new RuntimeException(e);
	  }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	private sealed partial class root_return : AstParserRuleReturnScope<object, IToken>
	{
		public Nodes nodes;
		public root_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_root();
	partial void LeaveRule_root();
	// $ANTLR start "root"
	// CloudScriptParser.g:55:1: root returns [Nodes nodes] : ( terminator )? ( expressions )? EOF !;
	[GrammarRule("root")]
	private CloudScriptParser.root_return root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		CloudScriptParser.root_return retval = new CloudScriptParser.root_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<object, IToken> terminator1 = default(AstParserRuleReturnScope<object, IToken>);
		CloudScriptParser.expressions_return expressions2 = default(CloudScriptParser.expressions_return);

		object EOF3_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(55, 2);
		try
		{
			// CloudScriptParser.g:55:27: ( ( terminator )? ( expressions )? EOF !)
			DebugEnterAlt(1);
			// CloudScriptParser.g:56:5: ( terminator )? ( expressions )? EOF !
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(56, 5);
			// CloudScriptParser.g:56:5: ( terminator )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==SEMICOLON||LA1_1==NEWLINE))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:56:5: terminator
				{
				DebugLocation(56, 5);
				PushFollow(Follow._terminator_in_root77);
				terminator1=terminator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, terminator1.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(56, 17);
			// CloudScriptParser.g:56:17: ( expressions )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if (((LA2_1>=CLASS && LA2_1<=IF)||LA2_1==WHILE||(LA2_1>=SELF && LA2_1<=FLOAT)||LA2_1==STRING||LA2_1==NAME||LA2_1==CONSTANT||LA2_1==URL||LA2_1==OPEN_PARENT||LA2_1==PRIV||LA2_1==NOT))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:56:17: expressions
				{
				DebugLocation(56, 17);
				PushFollow(Follow._expressions_in_root80);
				expressions2=expressions();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expressions2.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(56, 33);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root83); if (state.failed) return retval;
			DebugLocation(56, 35);
			if (state.backtracking == 0)
			{
				 retval.nodes = (expressions2!=null?expressions2.nodes:default(Nodes)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(57, 2);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	private sealed partial class expressions_return : AstParserRuleReturnScope<object, IToken>
	{
		public Nodes nodes;
		public expressions_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_expressions();
	partial void LeaveRule_expressions();
	// $ANTLR start "expressions"
	// CloudScriptParser.g:60:1: expressions returns [Nodes nodes] :head= expression ( terminator tail= expression )* ( terminator )? ;
	[GrammarRule("expressions")]
	private CloudScriptParser.expressions_return expressions()
	{
		EnterRule_expressions();
		EnterRule("expressions", 2);
		TraceIn("expressions", 2);
		CloudScriptParser.expressions_return retval = new CloudScriptParser.expressions_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		CloudScriptParser.expression_return head = default(CloudScriptParser.expression_return);
		CloudScriptParser.expression_return tail = default(CloudScriptParser.expression_return);
		AstParserRuleReturnScope<object, IToken> terminator4 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> terminator5 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "expressions");
		DebugLocation(60, 2);
		try
		{
			// CloudScriptParser.g:60:34: (head= expression ( terminator tail= expression )* ( terminator )? )
			DebugEnterAlt(1);
			// CloudScriptParser.g:61:23: head= expression ( terminator tail= expression )* ( terminator )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(61, 23);
			if (state.backtracking == 0)
			{
				 retval.nodes = new Nodes(); 
			}
			DebugLocation(62, 9);
			PushFollow(Follow._expression_in_expressions131);
			head=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, head.Tree);
			DebugLocation(62, 23);
			if (state.backtracking == 0)
			{
				 retval.nodes.add((head!=null?head.node:default(Node))); 
			}
			DebugLocation(63, 5);
			// CloudScriptParser.g:63:5: ( terminator tail= expression )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				try
				{
					alt3 = dfa3.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// CloudScriptParser.g:63:6: terminator tail= expression
					{
					DebugLocation(63, 6);
					PushFollow(Follow._terminator_in_expressions142);
					terminator4=terminator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, terminator4.Tree);
					DebugLocation(64, 10);
					PushFollow(Follow._expression_in_expressions151);
					tail=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, tail.Tree);
					DebugLocation(64, 23);
					if (state.backtracking == 0)
					{
						 retval.nodes.add((tail!=null?tail.node:default(Node))); 
					}

					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(66, 5);
			// CloudScriptParser.g:66:5: ( terminator )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==SEMICOLON||LA4_1==NEWLINE))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:66:5: terminator
				{
				DebugLocation(66, 5);
				PushFollow(Follow._terminator_in_expressions167);
				terminator5=terminator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, terminator5.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("expressions", 2);
			LeaveRule("expressions", 2);
			LeaveRule_expressions();
		}
		DebugLocation(67, 2);
		} finally { DebugExitRule(GrammarFileName, "expressions"); }
		return retval;

	}
	// $ANTLR end "expressions"

	private sealed partial class expression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public expression_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// CloudScriptParser.g:70:1: expression returns [Node node] : assignExpression ;
	[GrammarRule("expression")]
	private CloudScriptParser.expression_return expression()
	{
		EnterRule_expression();
		EnterRule("expression", 3);
		TraceIn("expression", 3);
		CloudScriptParser.expression_return retval = new CloudScriptParser.expression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		CloudScriptParser.assignExpression_return assignExpression6 = default(CloudScriptParser.assignExpression_return);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(70, 2);
		try
		{
			// CloudScriptParser.g:70:31: ( assignExpression )
			DebugEnterAlt(1);
			// CloudScriptParser.g:71:5: assignExpression
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(71, 5);
			PushFollow(Follow._assignExpression_in_expression187);
			assignExpression6=assignExpression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, assignExpression6.Tree);
			DebugLocation(71, 27);
			if (state.backtracking == 0)
			{
				 retval.node = (assignExpression6!=null?assignExpression6.node:default(Node)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("expression", 3);
			LeaveRule("expression", 3);
			LeaveRule_expression();
		}
		DebugLocation(72, 2);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"

	partial void EnterRule_terminator();
	partial void LeaveRule_terminator();
	// $ANTLR start "terminator"
	// CloudScriptParser.g:75:1: terminator : ( NEWLINE | SEMICOLON )+ ;
	[GrammarRule("terminator")]
	private AstParserRuleReturnScope<object, IToken> terminator()
	{
		EnterRule_terminator();
		EnterRule("terminator", 4);
		TraceIn("terminator", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set7 = default(IToken);

		object set7_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "terminator");
		DebugLocation(75, 34);
		try
		{
			// CloudScriptParser.g:75:11: ( ( NEWLINE | SEMICOLON )+ )
			DebugEnterAlt(1);
			// CloudScriptParser.g:75:13: ( NEWLINE | SEMICOLON )+
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(75, 13);
			// CloudScriptParser.g:75:13: ( NEWLINE | SEMICOLON )+
			int cnt5=0;
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_1 = input.LA(1);

				if ((LA5_1==SEMICOLON||LA5_1==NEWLINE))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// CloudScriptParser.g:
					{
					DebugLocation(75, 13);

					set7=(IToken)input.LT(1);
					if (input.LA(1)==SEMICOLON||input.LA(1)==NEWLINE)
					{
						input.Consume();
						if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(set7));
						state.errorRecovery=false;state.failed=false;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						DebugRecognitionException(mse);
						throw mse;
					}


					}
					break;

				default:
					if (cnt5 >= 1)
						goto loop5;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee5 = new EarlyExitException( 5, input );
					DebugRecognitionException(eee5);
					throw eee5;
				}
				cnt5++;
			}
			loop5:
				;

			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("terminator", 4);
			LeaveRule("terminator", 4);
			LeaveRule_terminator();
		}
		DebugLocation(75, 34);
		} finally { DebugExitRule(GrammarFileName, "terminator"); }
		return retval;

	}
	// $ANTLR end "terminator"

	private sealed partial class assignExpression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public assignExpression_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_assignExpression();
	partial void LeaveRule_assignExpression();
	// $ANTLR start "assignExpression"
	// CloudScriptParser.g:81:1: assignExpression returns [Node node] : ( assign |e= orExpression );
	[GrammarRule("assignExpression")]
	private CloudScriptParser.assignExpression_return assignExpression()
	{
		EnterRule_assignExpression();
		EnterRule("assignExpression", 5);
		TraceIn("assignExpression", 5);
		CloudScriptParser.assignExpression_return retval = new CloudScriptParser.assignExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		CloudScriptParser.orExpression_return e = default(CloudScriptParser.orExpression_return);
		CloudScriptParser.assign_return assign8 = default(CloudScriptParser.assign_return);

		try { DebugEnterRule(GrammarFileName, "assignExpression");
		DebugLocation(81, 2);
		try
		{
			// CloudScriptParser.g:81:37: ( assign |e= orExpression )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			switch (input.LA(1))
			{
			case NAME:
				{
				int LA6_2 = input.LA(2);

				if ((LA6_2==ASSIGN))
				{
					alt6 = 1;
				}
				else if ((LA6_2==EOF||LA6_2==ELSE||LA6_2==END||LA6_2==SEMICOLON||(LA6_2>=DOT && LA6_2<=CLOSE_PARENT)||(LA6_2>=EQ && LA6_2<=OR)||LA6_2==NEWLINE))
				{
					alt6 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 6, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CONSTANT:
				{
				int LA6_2 = input.LA(2);

				if ((LA6_2==ASSIGN))
				{
					alt6 = 1;
				}
				else if ((LA6_2==EOF||LA6_2==ELSE||LA6_2==END||LA6_2==SEMICOLON||(LA6_2>=DOT && LA6_2<=COMMA)||LA6_2==CLOSE_PARENT||(LA6_2>=EQ && LA6_2<=OR)||LA6_2==NEWLINE))
				{
					alt6 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 6, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIV:
				{
				int LA6_2 = input.LA(2);

				if ((LA6_2==NAME))
				{
					int LA6_3 = input.LA(3);

					if ((LA6_3==ASSIGN))
					{
						alt6 = 1;
					}
					else if ((LA6_3==EOF||LA6_3==ELSE||LA6_3==END||LA6_3==SEMICOLON||(LA6_3>=DOT && LA6_3<=COMMA)||LA6_3==CLOSE_PARENT||(LA6_3>=EQ && LA6_3<=OR)||LA6_3==NEWLINE))
					{
						alt6 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 6, 6, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 6, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
			case FN:
			case IF:
			case WHILE:
			case SELF:
			case NIL:
			case TRUE:
			case FALSE:
			case INTEGER:
			case FLOAT:
			case STRING:
			case URL:
			case OPEN_PARENT:
			case NOT:
				{
				alt6 = 2;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:82:5: assign
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(82, 5);
				PushFollow(Follow._assign_in_assignExpression231);
				assign8=assign();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, assign8.Tree);
				DebugLocation(82, 27);
				if (state.backtracking == 0)
				{
					 retval.node = (assign8!=null?assign8.node:default(Node)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CloudScriptParser.g:83:5: e= orExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(83, 6);
				PushFollow(Follow._orExpression_in_assignExpression256);
				e=orExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(83, 27);
				if (state.backtracking == 0)
				{
					 retval.node = (e!=null?e.node:default(Node)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("assignExpression", 5);
			LeaveRule("assignExpression", 5);
			LeaveRule_assignExpression();
		}
		DebugLocation(84, 2);
		} finally { DebugExitRule(GrammarFileName, "assignExpression"); }
		return retval;

	}
	// $ANTLR end "assignExpression"

	private sealed partial class orExpression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public orExpression_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_orExpression();
	partial void LeaveRule_orExpression();
	// $ANTLR start "orExpression"
	// CloudScriptParser.g:86:1: orExpression returns [Node node] : (receiver= andExpression OR arg= orExpression |e= andExpression );
	[GrammarRule("orExpression")]
	private CloudScriptParser.orExpression_return orExpression()
	{
		EnterRule_orExpression();
		EnterRule("orExpression", 6);
		TraceIn("orExpression", 6);
		CloudScriptParser.orExpression_return retval = new CloudScriptParser.orExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken OR9 = default(IToken);
		CloudScriptParser.andExpression_return receiver = default(CloudScriptParser.andExpression_return);
		CloudScriptParser.orExpression_return arg = default(CloudScriptParser.orExpression_return);
		CloudScriptParser.andExpression_return e = default(CloudScriptParser.andExpression_return);

		object OR9_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "orExpression");
		DebugLocation(86, 2);
		try
		{
			// CloudScriptParser.g:86:33: (receiver= andExpression OR arg= orExpression |e= andExpression )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case NOT:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_CloudScriptParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_CloudScriptParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTEGER:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_CloudScriptParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FLOAT:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_CloudScriptParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NIL:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_CloudScriptParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRUE:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_CloudScriptParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FALSE:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_CloudScriptParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CONSTANT:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_CloudScriptParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIV:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_CloudScriptParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SELF:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_CloudScriptParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case URL:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_CloudScriptParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NAME:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_CloudScriptParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FN:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_CloudScriptParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_CloudScriptParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IF:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_CloudScriptParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WHILE:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_CloudScriptParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OPEN_PARENT:
				{
				int LA7_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_CloudScriptParser_fragment)))
				{
					alt7 = 1;
				}
				else if ((true))
				{
					alt7 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:87:5: receiver= andExpression OR arg= orExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(87, 13);
				PushFollow(Follow._andExpression_in_orExpression285);
				receiver=andExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, receiver.Tree);
				DebugLocation(88, 7);
				OR9=(IToken)Match(input,OR,Follow._OR_in_orExpression293); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OR9_tree = (object)adaptor.Create(OR9);
				adaptor.AddChild(root_0, OR9_tree);
				}
				DebugLocation(88, 13);
				PushFollow(Follow._orExpression_in_orExpression297);
				arg=orExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arg.Tree);
				DebugLocation(88, 33);
				if (state.backtracking == 0)
				{
					 retval.node = new OrNode((receiver!=null?receiver.node:default(Node)), (arg!=null?arg.node:default(Node))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CloudScriptParser.g:89:5: e= andExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(89, 6);
				PushFollow(Follow._andExpression_in_orExpression313);
				e=andExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(89, 33);
				if (state.backtracking == 0)
				{
					 retval.node = (e!=null?e.node:default(Node)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("orExpression", 6);
			LeaveRule("orExpression", 6);
			LeaveRule_orExpression();
		}
		DebugLocation(90, 2);
		} finally { DebugExitRule(GrammarFileName, "orExpression"); }
		return retval;

	}
	// $ANTLR end "orExpression"

	private sealed partial class andExpression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public andExpression_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_andExpression();
	partial void LeaveRule_andExpression();
	// $ANTLR start "andExpression"
	// CloudScriptParser.g:92:1: andExpression returns [Node node] : (receiver= relationalExpression AND arg= andExpression |e= relationalExpression );
	[GrammarRule("andExpression")]
	private CloudScriptParser.andExpression_return andExpression()
	{
		EnterRule_andExpression();
		EnterRule("andExpression", 7);
		TraceIn("andExpression", 7);
		CloudScriptParser.andExpression_return retval = new CloudScriptParser.andExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken AND10 = default(IToken);
		CloudScriptParser.relationalExpression_return receiver = default(CloudScriptParser.relationalExpression_return);
		CloudScriptParser.andExpression_return arg = default(CloudScriptParser.andExpression_return);
		CloudScriptParser.relationalExpression_return e = default(CloudScriptParser.relationalExpression_return);

		object AND10_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "andExpression");
		DebugLocation(92, 2);
		try
		{
			// CloudScriptParser.g:92:34: (receiver= relationalExpression AND arg= andExpression |e= relationalExpression )
			int alt8=2;
			try { DebugEnterDecision(8, false);
			switch (input.LA(1))
			{
			case NOT:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_CloudScriptParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_CloudScriptParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTEGER:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_CloudScriptParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FLOAT:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_CloudScriptParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NIL:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_CloudScriptParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRUE:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_CloudScriptParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FALSE:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_CloudScriptParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CONSTANT:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_CloudScriptParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIV:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_CloudScriptParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SELF:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_CloudScriptParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case URL:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_CloudScriptParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NAME:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_CloudScriptParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FN:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_CloudScriptParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_CloudScriptParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IF:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_CloudScriptParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WHILE:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_CloudScriptParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OPEN_PARENT:
				{
				int LA8_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_CloudScriptParser_fragment)))
				{
					alt8 = 1;
				}
				else if ((true))
				{
					alt8 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:93:5: receiver= relationalExpression AND arg= andExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(93, 13);
				PushFollow(Follow._relationalExpression_in_andExpression347);
				receiver=relationalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, receiver.Tree);
				DebugLocation(94, 7);
				AND10=(IToken)Match(input,AND,Follow._AND_in_andExpression355); if (state.failed) return retval;
				if (state.backtracking == 0) {
				AND10_tree = (object)adaptor.Create(AND10);
				adaptor.AddChild(root_0, AND10_tree);
				}
				DebugLocation(94, 14);
				PushFollow(Follow._andExpression_in_andExpression359);
				arg=andExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arg.Tree);
				DebugLocation(94, 33);
				if (state.backtracking == 0)
				{
					 retval.node = new AndNode((receiver!=null?receiver.node:default(Node)), (arg!=null?arg.node:default(Node))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CloudScriptParser.g:95:5: e= relationalExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(95, 6);
				PushFollow(Follow._relationalExpression_in_andExpression373);
				e=relationalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(95, 33);
				if (state.backtracking == 0)
				{
					 retval.node = (e!=null?e.node:default(Node)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("andExpression", 7);
			LeaveRule("andExpression", 7);
			LeaveRule_andExpression();
		}
		DebugLocation(96, 2);
		} finally { DebugExitRule(GrammarFileName, "andExpression"); }
		return retval;

	}
	// $ANTLR end "andExpression"

	private sealed partial class relationalExpression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public relationalExpression_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();
	// $ANTLR start "relationalExpression"
	// CloudScriptParser.g:98:1: relationalExpression returns [Node node] : (receiver= additiveExpression op= ( EQ | LE | GE | LT | GT ) arg= relationalExpression |e= additiveExpression );
	[GrammarRule("relationalExpression")]
	private CloudScriptParser.relationalExpression_return relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 8);
		TraceIn("relationalExpression", 8);
		CloudScriptParser.relationalExpression_return retval = new CloudScriptParser.relationalExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		CloudScriptParser.additiveExpression_return receiver = default(CloudScriptParser.additiveExpression_return);
		CloudScriptParser.relationalExpression_return arg = default(CloudScriptParser.relationalExpression_return);
		CloudScriptParser.additiveExpression_return e = default(CloudScriptParser.additiveExpression_return);

		object op_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(98, 2);
		try
		{
			// CloudScriptParser.g:98:41: (receiver= additiveExpression op= ( EQ | LE | GE | LT | GT ) arg= relationalExpression |e= additiveExpression )
			int alt9=2;
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case NOT:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_CloudScriptParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_CloudScriptParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTEGER:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_CloudScriptParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FLOAT:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_CloudScriptParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NIL:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_CloudScriptParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRUE:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_CloudScriptParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FALSE:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_CloudScriptParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CONSTANT:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_CloudScriptParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIV:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_CloudScriptParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SELF:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_CloudScriptParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case URL:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_CloudScriptParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NAME:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_CloudScriptParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FN:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_CloudScriptParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_CloudScriptParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IF:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_CloudScriptParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WHILE:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_CloudScriptParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OPEN_PARENT:
				{
				int LA9_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_CloudScriptParser_fragment)))
				{
					alt9 = 1;
				}
				else if ((true))
				{
					alt9 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:99:5: receiver= additiveExpression op= ( EQ | LE | GE | LT | GT ) arg= relationalExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(99, 13);
				PushFollow(Follow._additiveExpression_in_relationalExpression400);
				receiver=additiveExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, receiver.Tree);
				DebugLocation(100, 9);

				op=(IToken)input.LT(1);
				if ((input.LA(1)>=EQ && input.LA(1)<=GT))
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(op));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(101, 10);
				PushFollow(Follow._relationalExpression_in_relationalExpression430);
				arg=relationalExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arg.Tree);
				DebugLocation(101, 33);
				if (state.backtracking == 0)
				{
					 retval.node = new CallNode((op!=null?op.Text:null), (receiver!=null?receiver.node:default(Node)), (arg!=null?arg.node:default(Node))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CloudScriptParser.g:102:5: e= additiveExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(102, 6);
				PushFollow(Follow._additiveExpression_in_relationalExpression441);
				e=additiveExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(102, 33);
				if (state.backtracking == 0)
				{
					 retval.node = (e!=null?e.node:default(Node)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("relationalExpression", 8);
			LeaveRule("relationalExpression", 8);
			LeaveRule_relationalExpression();
		}
		DebugLocation(103, 2);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return retval;

	}
	// $ANTLR end "relationalExpression"

	private sealed partial class additiveExpression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public additiveExpression_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();
	// $ANTLR start "additiveExpression"
	// CloudScriptParser.g:105:1: additiveExpression returns [Node node] : (receiver= multiplicativeExpression op= ( PLUS | MINUS ) arg= additiveExpression |e= multiplicativeExpression );
	[GrammarRule("additiveExpression")]
	private CloudScriptParser.additiveExpression_return additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 9);
		TraceIn("additiveExpression", 9);
		CloudScriptParser.additiveExpression_return retval = new CloudScriptParser.additiveExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		CloudScriptParser.multiplicativeExpression_return receiver = default(CloudScriptParser.multiplicativeExpression_return);
		CloudScriptParser.additiveExpression_return arg = default(CloudScriptParser.additiveExpression_return);
		CloudScriptParser.multiplicativeExpression_return e = default(CloudScriptParser.multiplicativeExpression_return);

		object op_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(105, 2);
		try
		{
			// CloudScriptParser.g:105:39: (receiver= multiplicativeExpression op= ( PLUS | MINUS ) arg= additiveExpression |e= multiplicativeExpression )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			switch (input.LA(1))
			{
			case NOT:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_CloudScriptParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_CloudScriptParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTEGER:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_CloudScriptParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FLOAT:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_CloudScriptParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NIL:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_CloudScriptParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRUE:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_CloudScriptParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FALSE:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_CloudScriptParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CONSTANT:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_CloudScriptParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIV:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_CloudScriptParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SELF:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_CloudScriptParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case URL:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_CloudScriptParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NAME:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_CloudScriptParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FN:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_CloudScriptParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_CloudScriptParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IF:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_CloudScriptParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WHILE:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_CloudScriptParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OPEN_PARENT:
				{
				int LA10_2 = input.LA(2);

				if ((EvaluatePredicate(synpred16_CloudScriptParser_fragment)))
				{
					alt10 = 1;
				}
				else if ((true))
				{
					alt10 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:106:5: receiver= multiplicativeExpression op= ( PLUS | MINUS ) arg= additiveExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(106, 13);
				PushFollow(Follow._multiplicativeExpression_in_additiveExpression470);
				receiver=multiplicativeExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, receiver.Tree);
				DebugLocation(107, 9);

				op=(IToken)input.LT(1);
				if ((input.LA(1)>=PLUS && input.LA(1)<=MINUS))
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(op));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(107, 26);
				PushFollow(Follow._additiveExpression_in_additiveExpression488);
				arg=additiveExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arg.Tree);
				DebugLocation(107, 47);
				if (state.backtracking == 0)
				{
					 retval.node = new CallNode((op!=null?op.Text:null), (receiver!=null?receiver.node:default(Node)), (arg!=null?arg.node:default(Node))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CloudScriptParser.g:108:5: e= multiplicativeExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(108, 6);
				PushFollow(Follow._multiplicativeExpression_in_additiveExpression499);
				e=multiplicativeExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(108, 47);
				if (state.backtracking == 0)
				{
					 retval.node = (e!=null?e.node:default(Node)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("additiveExpression", 9);
			LeaveRule("additiveExpression", 9);
			LeaveRule_additiveExpression();
		}
		DebugLocation(109, 2);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return retval;

	}
	// $ANTLR end "additiveExpression"

	private sealed partial class multiplicativeExpression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public multiplicativeExpression_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();
	// $ANTLR start "multiplicativeExpression"
	// CloudScriptParser.g:111:1: multiplicativeExpression returns [Node node] : (receiver= unaryExpression op= ( MUL | DIV | MOD ) arg= multiplicativeExpression |e= unaryExpression );
	[GrammarRule("multiplicativeExpression")]
	private CloudScriptParser.multiplicativeExpression_return multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 10);
		TraceIn("multiplicativeExpression", 10);
		CloudScriptParser.multiplicativeExpression_return retval = new CloudScriptParser.multiplicativeExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken op = default(IToken);
		CloudScriptParser.unaryExpression_return receiver = default(CloudScriptParser.unaryExpression_return);
		CloudScriptParser.multiplicativeExpression_return arg = default(CloudScriptParser.multiplicativeExpression_return);
		CloudScriptParser.unaryExpression_return e = default(CloudScriptParser.unaryExpression_return);

		object op_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(111, 2);
		try
		{
			// CloudScriptParser.g:111:45: (receiver= unaryExpression op= ( MUL | DIV | MOD ) arg= multiplicativeExpression |e= unaryExpression )
			int alt11=2;
			try { DebugEnterDecision(11, false);
			switch (input.LA(1))
			{
			case NOT:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_CloudScriptParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case STRING:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_CloudScriptParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTEGER:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_CloudScriptParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FLOAT:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_CloudScriptParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NIL:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_CloudScriptParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRUE:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_CloudScriptParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FALSE:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_CloudScriptParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CONSTANT:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_CloudScriptParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIV:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_CloudScriptParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SELF:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_CloudScriptParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case URL:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_CloudScriptParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NAME:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_CloudScriptParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FN:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_CloudScriptParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CLASS:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_CloudScriptParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IF:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_CloudScriptParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case WHILE:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_CloudScriptParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case OPEN_PARENT:
				{
				int LA11_2 = input.LA(2);

				if ((EvaluatePredicate(synpred19_CloudScriptParser_fragment)))
				{
					alt11 = 1;
				}
				else if ((true))
				{
					alt11 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:112:5: receiver= unaryExpression op= ( MUL | DIV | MOD ) arg= multiplicativeExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(112, 13);
				PushFollow(Follow._unaryExpression_in_multiplicativeExpression536);
				receiver=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, receiver.Tree);
				DebugLocation(113, 9);

				op=(IToken)input.LT(1);
				if ((input.LA(1)>=MUL && input.LA(1)<=MOD))
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (object)adaptor.Create(op));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(113, 27);
				PushFollow(Follow._multiplicativeExpression_in_multiplicativeExpression556);
				arg=multiplicativeExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arg.Tree);
				DebugLocation(113, 54);
				if (state.backtracking == 0)
				{
					 retval.node = new CallNode((op!=null?op.Text:null), (receiver!=null?receiver.node:default(Node)), (arg!=null?arg.node:default(Node))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CloudScriptParser.g:114:5: e= unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(114, 6);
				PushFollow(Follow._unaryExpression_in_multiplicativeExpression567);
				e=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(114, 54);
				if (state.backtracking == 0)
				{
					 retval.node = (e!=null?e.node:default(Node)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("multiplicativeExpression", 10);
			LeaveRule("multiplicativeExpression", 10);
			LeaveRule_multiplicativeExpression();
		}
		DebugLocation(115, 2);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return retval;

	}
	// $ANTLR end "multiplicativeExpression"

	private sealed partial class unaryExpression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public unaryExpression_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();
	// $ANTLR start "unaryExpression"
	// CloudScriptParser.g:117:1: unaryExpression returns [Node node] : ( NOT receiver= unaryExpression |e= primaryExpression );
	[GrammarRule("unaryExpression")]
	private CloudScriptParser.unaryExpression_return unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 11);
		TraceIn("unaryExpression", 11);
		CloudScriptParser.unaryExpression_return retval = new CloudScriptParser.unaryExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NOT11 = default(IToken);
		CloudScriptParser.unaryExpression_return receiver = default(CloudScriptParser.unaryExpression_return);
		CloudScriptParser.primaryExpression_return e = default(CloudScriptParser.primaryExpression_return);

		object NOT11_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(117, 2);
		try
		{
			// CloudScriptParser.g:117:36: ( NOT receiver= unaryExpression |e= primaryExpression )
			int alt12=2;
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==NOT))
			{
				alt12 = 1;
			}
			else if (((LA12_1>=CLASS && LA12_1<=IF)||LA12_1==WHILE||(LA12_1>=SELF && LA12_1<=FLOAT)||LA12_1==STRING||LA12_1==NAME||LA12_1==CONSTANT||LA12_1==URL||LA12_1==OPEN_PARENT||LA12_1==PRIV))
			{
				alt12 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 12, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:118:5: NOT receiver= unaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(118, 5);
				NOT11=(IToken)Match(input,NOT,Follow._NOT_in_unaryExpression618); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NOT11_tree = (object)adaptor.Create(NOT11);
				adaptor.AddChild(root_0, NOT11_tree);
				}
				DebugLocation(118, 17);
				PushFollow(Follow._unaryExpression_in_unaryExpression622);
				receiver=unaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, receiver.Tree);
				DebugLocation(118, 40);
				if (state.backtracking == 0)
				{
					 retval.node = new NotNode((receiver!=null?receiver.node:default(Node))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CloudScriptParser.g:119:5: e= primaryExpression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(119, 6);
				PushFollow(Follow._primaryExpression_in_unaryExpression638);
				e=primaryExpression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, e.Tree);
				DebugLocation(119, 40);
				if (state.backtracking == 0)
				{
					 retval.node = (e!=null?e.node:default(Node)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("unaryExpression", 11);
			LeaveRule("unaryExpression", 11);
			LeaveRule_unaryExpression();
		}
		DebugLocation(120, 2);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return retval;

	}
	// $ANTLR end "unaryExpression"

	private sealed partial class primaryExpression_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public primaryExpression_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();
	// $ANTLR start "primaryExpression"
	// CloudScriptParser.g:123:1: primaryExpression returns [Node node] : ( literal | call | methodDefinition | classDefinition | ifBlock | whileBlock | OPEN_PARENT expression CLOSE_PARENT );
	[GrammarRule("primaryExpression")]
	private CloudScriptParser.primaryExpression_return primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 12);
		TraceIn("primaryExpression", 12);
		CloudScriptParser.primaryExpression_return retval = new CloudScriptParser.primaryExpression_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken OPEN_PARENT18 = default(IToken);
		IToken CLOSE_PARENT20 = default(IToken);
		CloudScriptParser.literal_return literal12 = default(CloudScriptParser.literal_return);
		CloudScriptParser.call_return call13 = default(CloudScriptParser.call_return);
		CloudScriptParser.methodDefinition_return methodDefinition14 = default(CloudScriptParser.methodDefinition_return);
		CloudScriptParser.classDefinition_return classDefinition15 = default(CloudScriptParser.classDefinition_return);
		CloudScriptParser.ifBlock_return ifBlock16 = default(CloudScriptParser.ifBlock_return);
		CloudScriptParser.whileBlock_return whileBlock17 = default(CloudScriptParser.whileBlock_return);
		CloudScriptParser.expression_return expression19 = default(CloudScriptParser.expression_return);

		object OPEN_PARENT18_tree = default(object);
		object CLOSE_PARENT20_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(123, 2);
		try
		{
			// CloudScriptParser.g:123:38: ( literal | call | methodDefinition | classDefinition | ifBlock | whileBlock | OPEN_PARENT expression CLOSE_PARENT )
			int alt13=7;
			try { DebugEnterDecision(13, false);
			switch (input.LA(1))
			{
			case STRING:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==EOF||LA13_2==ELSE||LA13_2==END||LA13_2==SEMICOLON||LA13_2==COMMA||LA13_2==CLOSE_PARENT||(LA13_2>=EQ && LA13_2<=OR)||LA13_2==NEWLINE))
				{
					alt13 = 1;
				}
				else if ((LA13_2==DOT))
				{
					alt13 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case INTEGER:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==EOF||LA13_2==ELSE||LA13_2==END||LA13_2==SEMICOLON||LA13_2==COMMA||LA13_2==CLOSE_PARENT||(LA13_2>=EQ && LA13_2<=OR)||LA13_2==NEWLINE))
				{
					alt13 = 1;
				}
				else if ((LA13_2==DOT))
				{
					alt13 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FLOAT:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==EOF||LA13_2==ELSE||LA13_2==END||LA13_2==SEMICOLON||LA13_2==COMMA||LA13_2==CLOSE_PARENT||(LA13_2>=EQ && LA13_2<=OR)||LA13_2==NEWLINE))
				{
					alt13 = 1;
				}
				else if ((LA13_2==DOT))
				{
					alt13 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NIL:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==EOF||LA13_2==ELSE||LA13_2==END||LA13_2==SEMICOLON||LA13_2==COMMA||LA13_2==CLOSE_PARENT||(LA13_2>=EQ && LA13_2<=OR)||LA13_2==NEWLINE))
				{
					alt13 = 1;
				}
				else if ((LA13_2==DOT))
				{
					alt13 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case TRUE:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==EOF||LA13_2==ELSE||LA13_2==END||LA13_2==SEMICOLON||LA13_2==COMMA||LA13_2==CLOSE_PARENT||(LA13_2>=EQ && LA13_2<=OR)||LA13_2==NEWLINE))
				{
					alt13 = 1;
				}
				else if ((LA13_2==DOT))
				{
					alt13 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case FALSE:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==EOF||LA13_2==ELSE||LA13_2==END||LA13_2==SEMICOLON||LA13_2==COMMA||LA13_2==CLOSE_PARENT||(LA13_2>=EQ && LA13_2<=OR)||LA13_2==NEWLINE))
				{
					alt13 = 1;
				}
				else if ((LA13_2==DOT))
				{
					alt13 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case CONSTANT:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==EOF||LA13_2==ELSE||LA13_2==END||LA13_2==SEMICOLON||LA13_2==COMMA||LA13_2==CLOSE_PARENT||(LA13_2>=EQ && LA13_2<=OR)||LA13_2==NEWLINE))
				{
					alt13 = 1;
				}
				else if ((LA13_2==DOT))
				{
					alt13 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case PRIV:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==NAME))
				{
					int LA13_3 = input.LA(3);

					if ((LA13_3==EOF||LA13_3==ELSE||LA13_3==END||LA13_3==SEMICOLON||LA13_3==COMMA||LA13_3==CLOSE_PARENT||(LA13_3>=EQ && LA13_3<=OR)||LA13_3==NEWLINE))
					{
						alt13 = 1;
					}
					else if ((LA13_3==DOT))
					{
						alt13 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 13, 18, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case SELF:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==EOF||LA13_2==ELSE||LA13_2==END||LA13_2==SEMICOLON||LA13_2==COMMA||LA13_2==CLOSE_PARENT||(LA13_2>=EQ && LA13_2<=OR)||LA13_2==NEWLINE))
				{
					alt13 = 1;
				}
				else if ((LA13_2==DOT))
				{
					alt13 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case URL:
				{
				int LA13_2 = input.LA(2);

				if ((LA13_2==EOF||LA13_2==ELSE||LA13_2==END||LA13_2==SEMICOLON||LA13_2==COMMA||LA13_2==CLOSE_PARENT||(LA13_2>=EQ && LA13_2<=OR)||LA13_2==NEWLINE))
				{
					alt13 = 1;
				}
				else if ((LA13_2==DOT))
				{
					alt13 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case NAME:
				{
				alt13 = 2;
				}
				break;
			case FN:
				{
				alt13 = 3;
				}
				break;
			case CLASS:
				{
				alt13 = 4;
				}
				break;
			case IF:
				{
				alt13 = 5;
				}
				break;
			case WHILE:
				{
				alt13 = 6;
				}
				break;
			case OPEN_PARENT:
				{
				alt13 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:124:5: literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(124, 5);
				PushFollow(Follow._literal_in_primaryExpression674);
				literal12=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal12.Tree);
				DebugLocation(124, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (literal12!=null?literal12.node:default(Node)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CloudScriptParser.g:125:5: call
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(125, 5);
				PushFollow(Follow._call_in_primaryExpression692);
				call13=call();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, call13.Tree);
				DebugLocation(125, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (call13!=null?call13.node:default(Node)); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// CloudScriptParser.g:126:5: methodDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(126, 5);
				PushFollow(Follow._methodDefinition_in_primaryExpression713);
				methodDefinition14=methodDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, methodDefinition14.Tree);
				DebugLocation(126, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (methodDefinition14!=null?methodDefinition14.node:default(MethodDefinitionNode)); 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// CloudScriptParser.g:127:5: classDefinition
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(127, 5);
				PushFollow(Follow._classDefinition_in_primaryExpression722);
				classDefinition15=classDefinition();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, classDefinition15.Tree);
				DebugLocation(127, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (classDefinition15!=null?classDefinition15.node:default(ClassDefinitionNode)); 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// CloudScriptParser.g:128:5: ifBlock
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(128, 5);
				PushFollow(Follow._ifBlock_in_primaryExpression732);
				ifBlock16=ifBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ifBlock16.Tree);
				DebugLocation(128, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (ifBlock16!=null?ifBlock16.node:default(IfNode)); 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// CloudScriptParser.g:129:5: whileBlock
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(129, 5);
				PushFollow(Follow._whileBlock_in_primaryExpression750);
				whileBlock17=whileBlock();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, whileBlock17.Tree);
				DebugLocation(129, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (whileBlock17!=null?whileBlock17.node:default(WhileNode)); 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// CloudScriptParser.g:130:5: OPEN_PARENT expression CLOSE_PARENT
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(130, 5);
				OPEN_PARENT18=(IToken)Match(input,OPEN_PARENT,Follow._OPEN_PARENT_in_primaryExpression765); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OPEN_PARENT18_tree = (object)adaptor.Create(OPEN_PARENT18);
				adaptor.AddChild(root_0, OPEN_PARENT18_tree);
				}
				DebugLocation(131, 7);
				PushFollow(Follow._expression_in_primaryExpression773);
				expression19=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression19.Tree);
				DebugLocation(132, 5);
				CLOSE_PARENT20=(IToken)Match(input,CLOSE_PARENT,Follow._CLOSE_PARENT_in_primaryExpression779); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CLOSE_PARENT20_tree = (object)adaptor.Create(CLOSE_PARENT20);
				adaptor.AddChild(root_0, CLOSE_PARENT20_tree);
				}
				DebugLocation(132, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (expression19!=null?expression19.node:default(Node)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("primaryExpression", 12);
			LeaveRule("primaryExpression", 12);
			LeaveRule_primaryExpression();
		}
		DebugLocation(133, 2);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return retval;

	}
	// $ANTLR end "primaryExpression"

	private sealed partial class literal_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public literal_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// CloudScriptParser.g:136:1: literal returns [Node node] : ( STRING | INTEGER | FLOAT | NIL | TRUE | FALSE | constant | instanceVariable | self | URL );
	[GrammarRule("literal")]
	private CloudScriptParser.literal_return literal()
	{
		EnterRule_literal();
		EnterRule("literal", 13);
		TraceIn("literal", 13);
		CloudScriptParser.literal_return retval = new CloudScriptParser.literal_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken STRING21 = default(IToken);
		IToken INTEGER22 = default(IToken);
		IToken FLOAT23 = default(IToken);
		IToken NIL24 = default(IToken);
		IToken TRUE25 = default(IToken);
		IToken FALSE26 = default(IToken);
		IToken URL30 = default(IToken);
		CloudScriptParser.constant_return constant27 = default(CloudScriptParser.constant_return);
		CloudScriptParser.instanceVariable_return instanceVariable28 = default(CloudScriptParser.instanceVariable_return);
		CloudScriptParser.self_return self29 = default(CloudScriptParser.self_return);

		object STRING21_tree = default(object);
		object INTEGER22_tree = default(object);
		object FLOAT23_tree = default(object);
		object NIL24_tree = default(object);
		object TRUE25_tree = default(object);
		object FALSE26_tree = default(object);
		object URL30_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(136, 2);
		try
		{
			// CloudScriptParser.g:136:28: ( STRING | INTEGER | FLOAT | NIL | TRUE | FALSE | constant | instanceVariable | self | URL )
			int alt14=10;
			try { DebugEnterDecision(14, false);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt14 = 1;
				}
				break;
			case INTEGER:
				{
				alt14 = 2;
				}
				break;
			case FLOAT:
				{
				alt14 = 3;
				}
				break;
			case NIL:
				{
				alt14 = 4;
				}
				break;
			case TRUE:
				{
				alt14 = 5;
				}
				break;
			case FALSE:
				{
				alt14 = 6;
				}
				break;
			case CONSTANT:
				{
				alt14 = 7;
				}
				break;
			case PRIV:
				{
				alt14 = 8;
				}
				break;
			case SELF:
				{
				alt14 = 9;
				}
				break;
			case URL:
				{
				alt14 = 10;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:137:5: STRING
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(137, 5);
				STRING21=(IToken)Match(input,STRING,Follow._STRING_in_literal805); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING21_tree = (object)adaptor.Create(STRING21);
				adaptor.AddChild(root_0, STRING21_tree);
				}
				DebugLocation(137, 23);
				if (state.backtracking == 0)
				{
					 retval.node = new LiteralNode(new ValueObject((STRING21!=null?STRING21.Text:null).substring(1, (STRING21!=null?STRING21.Text:null).length() - 1))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CloudScriptParser.g:138:5: INTEGER
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(138, 5);
				INTEGER22=(IToken)Match(input,INTEGER,Follow._INTEGER_in_literal824); if (state.failed) return retval;
				if (state.backtracking == 0) {
				INTEGER22_tree = (object)adaptor.Create(INTEGER22);
				adaptor.AddChild(root_0, INTEGER22_tree);
				}
				DebugLocation(138, 23);
				if (state.backtracking == 0)
				{
					 retval.node = new LiteralNode(new ValueObject(new Integer((INTEGER22!=null?INTEGER22.Text:null)))); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// CloudScriptParser.g:139:5: FLOAT
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(139, 5);
				FLOAT23=(IToken)Match(input,FLOAT,Follow._FLOAT_in_literal842); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FLOAT23_tree = (object)adaptor.Create(FLOAT23);
				adaptor.AddChild(root_0, FLOAT23_tree);
				}
				DebugLocation(139, 23);
				if (state.backtracking == 0)
				{
					 retval.node = new LiteralNode(new ValueObject(new Float((FLOAT23!=null?FLOAT23.Text:null)))); 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// CloudScriptParser.g:140:5: NIL
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(140, 5);
				NIL24=(IToken)Match(input,NIL,Follow._NIL_in_literal862); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NIL24_tree = (object)adaptor.Create(NIL24);
				adaptor.AddChild(root_0, NIL24_tree);
				}
				DebugLocation(140, 23);
				if (state.backtracking == 0)
				{
					 retval.node = new LiteralNode(CloudScriptRuntime.getNil()); 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// CloudScriptParser.g:141:5: TRUE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(141, 5);
				TRUE25=(IToken)Match(input,TRUE,Follow._TRUE_in_literal884); if (state.failed) return retval;
				if (state.backtracking == 0) {
				TRUE25_tree = (object)adaptor.Create(TRUE25);
				adaptor.AddChild(root_0, TRUE25_tree);
				}
				DebugLocation(141, 23);
				if (state.backtracking == 0)
				{
					 retval.node = new LiteralNode(CloudScriptRuntime.getTrue()); 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// CloudScriptParser.g:142:5: FALSE
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(142, 5);
				FALSE26=(IToken)Match(input,FALSE,Follow._FALSE_in_literal905); if (state.failed) return retval;
				if (state.backtracking == 0) {
				FALSE26_tree = (object)adaptor.Create(FALSE26);
				adaptor.AddChild(root_0, FALSE26_tree);
				}
				DebugLocation(142, 23);
				if (state.backtracking == 0)
				{
					 retval.node = new LiteralNode(CloudScriptRuntime.getFalse()); 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// CloudScriptParser.g:143:5: constant
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(143, 5);
				PushFollow(Follow._constant_in_literal925);
				constant27=constant();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, constant27.Tree);
				DebugLocation(143, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (constant27!=null?constant27.node:default(ConstantNode)); 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// CloudScriptParser.g:144:5: instanceVariable
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(144, 5);
				PushFollow(Follow._instanceVariable_in_literal942);
				instanceVariable28=instanceVariable();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, instanceVariable28.Tree);
				DebugLocation(144, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (instanceVariable28!=null?instanceVariable28.node:default(InstanceVariableNode)); 
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// CloudScriptParser.g:145:5: self
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(145, 5);
				PushFollow(Follow._self_in_literal951);
				self29=self();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, self29.Tree);
				DebugLocation(145, 23);
				if (state.backtracking == 0)
				{
					 retval.node = (self29!=null?self29.node:default(SelfNode)); 
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// CloudScriptParser.g:146:5: URL
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(146, 5);
				URL30=(IToken)Match(input,URL,Follow._URL_in_literal972); if (state.failed) return retval;
				if (state.backtracking == 0) {
				URL30_tree = (object)adaptor.Create(URL30);
				adaptor.AddChild(root_0, URL30_tree);
				}
				DebugLocation(146, 23);
				if (state.backtracking == 0)
				{
					 retval.node = new UrlNode((URL30!=null?URL30.Text:null)); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("literal", 13);
			LeaveRule("literal", 13);
			LeaveRule_literal();
		}
		DebugLocation(147, 2);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	private sealed partial class self_return : AstParserRuleReturnScope<object, IToken>
	{
		public SelfNode node;
		public self_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_self();
	partial void LeaveRule_self();
	// $ANTLR start "self"
	// CloudScriptParser.g:150:1: self returns [SelfNode node] : SELF ;
	[GrammarRule("self")]
	private CloudScriptParser.self_return self()
	{
		EnterRule_self();
		EnterRule("self", 14);
		TraceIn("self", 14);
		CloudScriptParser.self_return retval = new CloudScriptParser.self_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken SELF31 = default(IToken);

		object SELF31_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "self");
		DebugLocation(150, 2);
		try
		{
			// CloudScriptParser.g:150:29: ( SELF )
			DebugEnterAlt(1);
			// CloudScriptParser.g:151:5: SELF
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(151, 5);
			SELF31=(IToken)Match(input,SELF,Follow._SELF_in_self1007); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SELF31_tree = (object)adaptor.Create(SELF31);
			adaptor.AddChild(root_0, SELF31_tree);
			}
			DebugLocation(151, 23);
			if (state.backtracking == 0)
			{
				 retval.node = new SelfNode(); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("self", 14);
			LeaveRule("self", 14);
			LeaveRule_self();
		}
		DebugLocation(152, 2);
		} finally { DebugExitRule(GrammarFileName, "self"); }
		return retval;

	}
	// $ANTLR end "self"

	private sealed partial class instanceVariable_return : AstParserRuleReturnScope<object, IToken>
	{
		public InstanceVariableNode node;
		public instanceVariable_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_instanceVariable();
	partial void LeaveRule_instanceVariable();
	// $ANTLR start "instanceVariable"
	// CloudScriptParser.g:155:1: instanceVariable returns [InstanceVariableNode node] : PRIV NAME ;
	[GrammarRule("instanceVariable")]
	private CloudScriptParser.instanceVariable_return instanceVariable()
	{
		EnterRule_instanceVariable();
		EnterRule("instanceVariable", 15);
		TraceIn("instanceVariable", 15);
		CloudScriptParser.instanceVariable_return retval = new CloudScriptParser.instanceVariable_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken PRIV32 = default(IToken);
		IToken NAME33 = default(IToken);

		object PRIV32_tree = default(object);
		object NAME33_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "instanceVariable");
		DebugLocation(155, 2);
		try
		{
			// CloudScriptParser.g:155:53: ( PRIV NAME )
			DebugEnterAlt(1);
			// CloudScriptParser.g:156:5: PRIV NAME
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(156, 5);
			PRIV32=(IToken)Match(input,PRIV,Follow._PRIV_in_instanceVariable1041); if (state.failed) return retval;
			if (state.backtracking == 0) {
			PRIV32_tree = (object)adaptor.Create(PRIV32);
			adaptor.AddChild(root_0, PRIV32_tree);
			}
			DebugLocation(156, 10);
			NAME33=(IToken)Match(input,NAME,Follow._NAME_in_instanceVariable1043); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NAME33_tree = (object)adaptor.Create(NAME33);
			adaptor.AddChild(root_0, NAME33_tree);
			}
			DebugLocation(156, 25);
			if (state.backtracking == 0)
			{
				 retval.node = new InstanceVariableNode((NAME33!=null?NAME33.Text:null)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("instanceVariable", 15);
			LeaveRule("instanceVariable", 15);
			LeaveRule_instanceVariable();
		}
		DebugLocation(157, 2);
		} finally { DebugExitRule(GrammarFileName, "instanceVariable"); }
		return retval;

	}
	// $ANTLR end "instanceVariable"

	private sealed partial class call_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public call_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_call();
	partial void LeaveRule_call();
	// $ANTLR start "call"
	// CloudScriptParser.g:160:1: call returns [Node node] : ( literal DOT )? (head= message DOT )* tail= message ;
	[GrammarRule("call")]
	private CloudScriptParser.call_return call()
	{
		EnterRule_call();
		EnterRule("call", 16);
		TraceIn("call", 16);
		CloudScriptParser.call_return retval = new CloudScriptParser.call_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DOT35 = default(IToken);
		IToken DOT36 = default(IToken);
		CloudScriptParser.message_return head = default(CloudScriptParser.message_return);
		CloudScriptParser.message_return tail = default(CloudScriptParser.message_return);
		CloudScriptParser.literal_return literal34 = default(CloudScriptParser.literal_return);

		object DOT35_tree = default(object);
		object DOT36_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "call");
		DebugLocation(160, 2);
		try
		{
			// CloudScriptParser.g:160:25: ( ( literal DOT )? (head= message DOT )* tail= message )
			DebugEnterAlt(1);
			// CloudScriptParser.g:161:5: ( literal DOT )? (head= message DOT )* tail= message
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(161, 5);
			// CloudScriptParser.g:161:5: ( literal DOT )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if (((LA15_1>=SELF && LA15_1<=FLOAT)||LA15_1==STRING||LA15_1==CONSTANT||LA15_1==URL||LA15_1==PRIV))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:161:6: literal DOT
				{
				DebugLocation(161, 6);
				PushFollow(Follow._literal_in_call1075);
				literal34=literal();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, literal34.Tree);
				DebugLocation(161, 14);
				DOT35=(IToken)Match(input,DOT,Follow._DOT_in_call1077); if (state.failed) return retval;
				if (state.backtracking == 0) {
				DOT35_tree = (object)adaptor.Create(DOT35);
				adaptor.AddChild(root_0, DOT35_tree);
				}
				DebugLocation(161, 37);
				if (state.backtracking == 0)
				{
					 retval.node = (literal34!=null?literal34.node:default(Node)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(163, 5);
			// CloudScriptParser.g:163:5: (head= message DOT )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==NAME))
				{
					int LA16_2 = input.LA(2);

					if ((EvaluatePredicate(synpred37_CloudScriptParser_fragment)))
					{
						alt16 = 1;
					}


				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// CloudScriptParser.g:163:6: head= message DOT
					{
					DebugLocation(163, 10);
					PushFollow(Follow._message_in_call1116);
					head=message();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, head.Tree);
					DebugLocation(163, 19);
					DOT36=(IToken)Match(input,DOT,Follow._DOT_in_call1118); if (state.failed) return retval;
					if (state.backtracking == 0) {
					DOT36_tree = (object)adaptor.Create(DOT36);
					adaptor.AddChild(root_0, DOT36_tree);
					}
					DebugLocation(163, 37);
					if (state.backtracking == 0)
					{
						 ((CallNode)(head!=null?head.node:default(CallNode))).setReceiver(retval.node); retval.node = (head!=null?head.node:default(CallNode)); 
					}

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(165, 9);
			PushFollow(Follow._message_in_call1151);
			tail=message();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, tail.Tree);
			DebugLocation(165, 37);
			if (state.backtracking == 0)
			{
				 ((CallNode)(tail!=null?tail.node:default(CallNode))).setReceiver(retval.node); retval.node = (tail!=null?tail.node:default(CallNode)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("call", 16);
			LeaveRule("call", 16);
			LeaveRule_call();
		}
		DebugLocation(166, 2);
		} finally { DebugExitRule(GrammarFileName, "call"); }
		return retval;

	}
	// $ANTLR end "call"

	private sealed partial class message_return : AstParserRuleReturnScope<object, IToken>
	{
		public CallNode node;
		public message_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_message();
	partial void LeaveRule_message();
	// $ANTLR start "message"
	// CloudScriptParser.g:169:1: message returns [CallNode node] : ( NAME | NAME OPEN_PARENT CLOSE_PARENT | NAME OPEN_PARENT arguments CLOSE_PARENT );
	[GrammarRule("message")]
	private CloudScriptParser.message_return message()
	{
		EnterRule_message();
		EnterRule("message", 17);
		TraceIn("message", 17);
		CloudScriptParser.message_return retval = new CloudScriptParser.message_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NAME37 = default(IToken);
		IToken NAME38 = default(IToken);
		IToken OPEN_PARENT39 = default(IToken);
		IToken CLOSE_PARENT40 = default(IToken);
		IToken NAME41 = default(IToken);
		IToken OPEN_PARENT42 = default(IToken);
		IToken CLOSE_PARENT44 = default(IToken);
		CloudScriptParser.arguments_return arguments43 = default(CloudScriptParser.arguments_return);

		object NAME37_tree = default(object);
		object NAME38_tree = default(object);
		object OPEN_PARENT39_tree = default(object);
		object CLOSE_PARENT40_tree = default(object);
		object NAME41_tree = default(object);
		object OPEN_PARENT42_tree = default(object);
		object CLOSE_PARENT44_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "message");
		DebugLocation(169, 2);
		try
		{
			// CloudScriptParser.g:169:32: ( NAME | NAME OPEN_PARENT CLOSE_PARENT | NAME OPEN_PARENT arguments CLOSE_PARENT )
			int alt17=3;
			try { DebugEnterDecision(17, false);
			int LA17_1 = input.LA(1);

			if ((LA17_1==NAME))
			{
				int LA17_2 = input.LA(2);

				if ((LA17_2==OPEN_PARENT))
				{
					int LA17_3 = input.LA(3);

					if ((LA17_3==CLOSE_PARENT))
					{
						alt17 = 2;
					}
					else if (((LA17_3>=CLASS && LA17_3<=IF)||LA17_3==WHILE||(LA17_3>=SELF && LA17_3<=FLOAT)||LA17_3==STRING||LA17_3==NAME||LA17_3==CONSTANT||LA17_3==URL||LA17_3==OPEN_PARENT||LA17_3==PRIV||LA17_3==NOT))
					{
						alt17 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return retval;}
						NoViableAltException nvae = new NoViableAltException("", 17, 2, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}
				else if ((LA17_2==EOF||LA17_2==ELSE||LA17_2==END||LA17_2==SEMICOLON||(LA17_2>=DOT && LA17_2<=COMMA)||LA17_2==CLOSE_PARENT||(LA17_2>=EQ && LA17_2<=OR)||LA17_2==NEWLINE))
				{
					alt17 = 1;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 17, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:170:5: NAME
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(170, 5);
				NAME37=(IToken)Match(input,NAME,Follow._NAME_in_message1191); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME37_tree = (object)adaptor.Create(NAME37);
				adaptor.AddChild(root_0, NAME37_tree);
				}
				DebugLocation(170, 37);
				if (state.backtracking == 0)
				{
					 retval.node = new CallNode((NAME37!=null?NAME37.Text:null)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CloudScriptParser.g:171:5: NAME OPEN_PARENT CLOSE_PARENT
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(171, 5);
				NAME38=(IToken)Match(input,NAME,Follow._NAME_in_message1226); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME38_tree = (object)adaptor.Create(NAME38);
				adaptor.AddChild(root_0, NAME38_tree);
				}
				DebugLocation(171, 10);
				OPEN_PARENT39=(IToken)Match(input,OPEN_PARENT,Follow._OPEN_PARENT_in_message1228); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OPEN_PARENT39_tree = (object)adaptor.Create(OPEN_PARENT39);
				adaptor.AddChild(root_0, OPEN_PARENT39_tree);
				}
				DebugLocation(171, 22);
				CLOSE_PARENT40=(IToken)Match(input,CLOSE_PARENT,Follow._CLOSE_PARENT_in_message1230); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CLOSE_PARENT40_tree = (object)adaptor.Create(CLOSE_PARENT40);
				adaptor.AddChild(root_0, CLOSE_PARENT40_tree);
				}
				DebugLocation(171, 37);
				if (state.backtracking == 0)
				{
					 retval.node = new CallNode((NAME38!=null?NAME38.Text:null), new ArrayList<Node>()); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// CloudScriptParser.g:172:5: NAME OPEN_PARENT arguments CLOSE_PARENT
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(172, 5);
				NAME41=(IToken)Match(input,NAME,Follow._NAME_in_message1240); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME41_tree = (object)adaptor.Create(NAME41);
				adaptor.AddChild(root_0, NAME41_tree);
				}
				DebugLocation(172, 10);
				OPEN_PARENT42=(IToken)Match(input,OPEN_PARENT,Follow._OPEN_PARENT_in_message1242); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OPEN_PARENT42_tree = (object)adaptor.Create(OPEN_PARENT42);
				adaptor.AddChild(root_0, OPEN_PARENT42_tree);
				}
				DebugLocation(173, 12);
				PushFollow(Follow._arguments_in_message1255);
				arguments43=arguments();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, arguments43.Tree);
				DebugLocation(174, 10);
				CLOSE_PARENT44=(IToken)Match(input,CLOSE_PARENT,Follow._CLOSE_PARENT_in_message1266); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CLOSE_PARENT44_tree = (object)adaptor.Create(CLOSE_PARENT44);
				adaptor.AddChild(root_0, CLOSE_PARENT44_tree);
				}
				DebugLocation(174, 37);
				if (state.backtracking == 0)
				{
					 retval.node = new CallNode((NAME41!=null?NAME41.Text:null), (arguments43!=null?arguments43.nodes:default(ArrayList<Node>))); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("message", 17);
			LeaveRule("message", 17);
			LeaveRule_message();
		}
		DebugLocation(175, 2);
		} finally { DebugExitRule(GrammarFileName, "message"); }
		return retval;

	}
	// $ANTLR end "message"

	private sealed partial class arguments_return : AstParserRuleReturnScope<object, IToken>
	{
		public ArrayList<Node> nodes;
		public arguments_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_arguments();
	partial void LeaveRule_arguments();
	// $ANTLR start "arguments"
	// CloudScriptParser.g:178:1: arguments returns [ArrayList<Node> nodes] :head= expression ( COMMA tail= expression )* ;
	[GrammarRule("arguments")]
	private CloudScriptParser.arguments_return arguments()
	{
		EnterRule_arguments();
		EnterRule("arguments", 18);
		TraceIn("arguments", 18);
		CloudScriptParser.arguments_return retval = new CloudScriptParser.arguments_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken COMMA45 = default(IToken);
		CloudScriptParser.expression_return head = default(CloudScriptParser.expression_return);
		CloudScriptParser.expression_return tail = default(CloudScriptParser.expression_return);

		object COMMA45_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "arguments");
		DebugLocation(178, 2);
		try
		{
			// CloudScriptParser.g:178:42: (head= expression ( COMMA tail= expression )* )
			DebugEnterAlt(1);
			// CloudScriptParser.g:179:37: head= expression ( COMMA tail= expression )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(179, 37);
			if (state.backtracking == 0)
			{
				 retval.nodes = new ArrayList<Node>(); 
			}
			DebugLocation(180, 9);
			PushFollow(Follow._expression_in_arguments1341);
			head=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, head.Tree);
			DebugLocation(180, 37);
			if (state.backtracking == 0)
			{
				 retval.nodes.add((head!=null?head.node:default(Node))); 
			}
			DebugLocation(181, 5);
			// CloudScriptParser.g:181:5: ( COMMA tail= expression )*
			try { DebugEnterSubRule(18);
			while (true)
			{
				int alt18=2;
				try { DebugEnterDecision(18, false);
				int LA18_1 = input.LA(1);

				if ((LA18_1==COMMA))
				{
					alt18 = 1;
				}


				} finally { DebugExitDecision(18); }
				switch ( alt18 )
				{
				case 1:
					DebugEnterAlt(1);
					// CloudScriptParser.g:181:6: COMMA tail= expression
					{
					DebugLocation(181, 6);
					COMMA45=(IToken)Match(input,COMMA,Follow._COMMA_in_arguments1366); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA45_tree = (object)adaptor.Create(COMMA45);
					adaptor.AddChild(root_0, COMMA45_tree);
					}
					DebugLocation(182, 10);
					PushFollow(Follow._expression_in_arguments1375);
					tail=expression();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, tail.Tree);
					DebugLocation(182, 37);
					if (state.backtracking == 0)
					{
						 retval.nodes.add((tail!=null?tail.node:default(Node))); 
					}

					}
					break;

				default:
					goto loop18;
				}
			}

			loop18:
				;

			} finally { DebugExitSubRule(18); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("arguments", 18);
			LeaveRule("arguments", 18);
			LeaveRule_arguments();
		}
		DebugLocation(184, 2);
		} finally { DebugExitRule(GrammarFileName, "arguments"); }
		return retval;

	}
	// $ANTLR end "arguments"

	private sealed partial class constant_return : AstParserRuleReturnScope<object, IToken>
	{
		public ConstantNode node;
		public constant_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_constant();
	partial void LeaveRule_constant();
	// $ANTLR start "constant"
	// CloudScriptParser.g:187:1: constant returns [ConstantNode node] : CONSTANT ;
	[GrammarRule("constant")]
	private CloudScriptParser.constant_return constant()
	{
		EnterRule_constant();
		EnterRule("constant", 19);
		TraceIn("constant", 19);
		CloudScriptParser.constant_return retval = new CloudScriptParser.constant_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken CONSTANT46 = default(IToken);

		object CONSTANT46_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "constant");
		DebugLocation(187, 2);
		try
		{
			// CloudScriptParser.g:187:37: ( CONSTANT )
			DebugEnterAlt(1);
			// CloudScriptParser.g:188:5: CONSTANT
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(188, 5);
			CONSTANT46=(IToken)Match(input,CONSTANT,Follow._CONSTANT_in_constant1418); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CONSTANT46_tree = (object)adaptor.Create(CONSTANT46);
			adaptor.AddChild(root_0, CONSTANT46_tree);
			}
			DebugLocation(188, 37);
			if (state.backtracking == 0)
			{
				 retval.node = new ConstantNode((CONSTANT46!=null?CONSTANT46.Text:null)); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("constant", 19);
			LeaveRule("constant", 19);
			LeaveRule_constant();
		}
		DebugLocation(189, 2);
		} finally { DebugExitRule(GrammarFileName, "constant"); }
		return retval;

	}
	// $ANTLR end "constant"

	private sealed partial class assign_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public assign_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_assign();
	partial void LeaveRule_assign();
	// $ANTLR start "assign"
	// CloudScriptParser.g:192:1: assign returns [Node node] : ( NAME ASSIGN expression | CONSTANT ASSIGN expression | PRIV NAME ASSIGN expression );
	[GrammarRule("assign")]
	private CloudScriptParser.assign_return assign()
	{
		EnterRule_assign();
		EnterRule("assign", 20);
		TraceIn("assign", 20);
		CloudScriptParser.assign_return retval = new CloudScriptParser.assign_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken NAME47 = default(IToken);
		IToken ASSIGN48 = default(IToken);
		IToken CONSTANT50 = default(IToken);
		IToken ASSIGN51 = default(IToken);
		IToken PRIV53 = default(IToken);
		IToken NAME54 = default(IToken);
		IToken ASSIGN55 = default(IToken);
		CloudScriptParser.expression_return expression49 = default(CloudScriptParser.expression_return);
		CloudScriptParser.expression_return expression52 = default(CloudScriptParser.expression_return);
		CloudScriptParser.expression_return expression56 = default(CloudScriptParser.expression_return);

		object NAME47_tree = default(object);
		object ASSIGN48_tree = default(object);
		object CONSTANT50_tree = default(object);
		object ASSIGN51_tree = default(object);
		object PRIV53_tree = default(object);
		object NAME54_tree = default(object);
		object ASSIGN55_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "assign");
		DebugLocation(192, 2);
		try
		{
			// CloudScriptParser.g:192:27: ( NAME ASSIGN expression | CONSTANT ASSIGN expression | PRIV NAME ASSIGN expression )
			int alt19=3;
			try { DebugEnterDecision(19, false);
			switch (input.LA(1))
			{
			case NAME:
				{
				alt19 = 1;
				}
				break;
			case CONSTANT:
				{
				alt19 = 2;
				}
				break;
			case PRIV:
				{
				alt19 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:193:5: NAME ASSIGN expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(193, 5);
				NAME47=(IToken)Match(input,NAME,Follow._NAME_in_assign1462); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME47_tree = (object)adaptor.Create(NAME47);
				adaptor.AddChild(root_0, NAME47_tree);
				}
				DebugLocation(193, 10);
				ASSIGN48=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_assign1464); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ASSIGN48_tree = (object)adaptor.Create(ASSIGN48);
				adaptor.AddChild(root_0, ASSIGN48_tree);
				}
				DebugLocation(193, 17);
				PushFollow(Follow._expression_in_assign1466);
				expression49=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression49.Tree);
				DebugLocation(193, 37);
				if (state.backtracking == 0)
				{
					 retval.node = new LocalAssignNode((NAME47!=null?NAME47.Text:null), (expression49!=null?expression49.node:default(Node))); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CloudScriptParser.g:194:5: CONSTANT ASSIGN expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(194, 5);
				CONSTANT50=(IToken)Match(input,CONSTANT,Follow._CONSTANT_in_assign1483); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CONSTANT50_tree = (object)adaptor.Create(CONSTANT50);
				adaptor.AddChild(root_0, CONSTANT50_tree);
				}
				DebugLocation(194, 14);
				ASSIGN51=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_assign1485); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ASSIGN51_tree = (object)adaptor.Create(ASSIGN51);
				adaptor.AddChild(root_0, ASSIGN51_tree);
				}
				DebugLocation(194, 21);
				PushFollow(Follow._expression_in_assign1487);
				expression52=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression52.Tree);
				DebugLocation(194, 37);
				if (state.backtracking == 0)
				{
					 retval.node = new ConstantAssignNode((CONSTANT50!=null?CONSTANT50.Text:null), (expression52!=null?expression52.node:default(Node))); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// CloudScriptParser.g:195:5: PRIV NAME ASSIGN expression
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(195, 5);
				PRIV53=(IToken)Match(input,PRIV,Follow._PRIV_in_assign1500); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PRIV53_tree = (object)adaptor.Create(PRIV53);
				adaptor.AddChild(root_0, PRIV53_tree);
				}
				DebugLocation(195, 10);
				NAME54=(IToken)Match(input,NAME,Follow._NAME_in_assign1502); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NAME54_tree = (object)adaptor.Create(NAME54);
				adaptor.AddChild(root_0, NAME54_tree);
				}
				DebugLocation(195, 15);
				ASSIGN55=(IToken)Match(input,ASSIGN,Follow._ASSIGN_in_assign1504); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ASSIGN55_tree = (object)adaptor.Create(ASSIGN55);
				adaptor.AddChild(root_0, ASSIGN55_tree);
				}
				DebugLocation(195, 22);
				PushFollow(Follow._expression_in_assign1506);
				expression56=expression();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expression56.Tree);
				DebugLocation(195, 39);
				if (state.backtracking == 0)
				{
					 retval.node = new InstanceVariableAssignNode((NAME54!=null?NAME54.Text:null), (expression56!=null?expression56.node:default(Node))); 
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("assign", 20);
			LeaveRule("assign", 20);
			LeaveRule_assign();
		}
		DebugLocation(196, 2);
		} finally { DebugExitRule(GrammarFileName, "assign"); }
		return retval;

	}
	// $ANTLR end "assign"

	private sealed partial class methodDefinition_return : AstParserRuleReturnScope<object, IToken>
	{
		public MethodDefinitionNode node;
		public methodDefinition_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_methodDefinition();
	partial void LeaveRule_methodDefinition();
	// $ANTLR start "methodDefinition"
	// CloudScriptParser.g:198:1: methodDefinition returns [MethodDefinitionNode node] : FN NAME ( OPEN_PARENT ( parameters )? CLOSE_PARENT )? terminator expressions END ;
	[GrammarRule("methodDefinition")]
	private CloudScriptParser.methodDefinition_return methodDefinition()
	{
		EnterRule_methodDefinition();
		EnterRule("methodDefinition", 21);
		TraceIn("methodDefinition", 21);
		CloudScriptParser.methodDefinition_return retval = new CloudScriptParser.methodDefinition_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken FN57 = default(IToken);
		IToken NAME58 = default(IToken);
		IToken OPEN_PARENT59 = default(IToken);
		IToken CLOSE_PARENT61 = default(IToken);
		IToken END64 = default(IToken);
		CloudScriptParser.parameters_return parameters60 = default(CloudScriptParser.parameters_return);
		AstParserRuleReturnScope<object, IToken> terminator62 = default(AstParserRuleReturnScope<object, IToken>);
		CloudScriptParser.expressions_return expressions63 = default(CloudScriptParser.expressions_return);

		object FN57_tree = default(object);
		object NAME58_tree = default(object);
		object OPEN_PARENT59_tree = default(object);
		object CLOSE_PARENT61_tree = default(object);
		object END64_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "methodDefinition");
		DebugLocation(198, 2);
		try
		{
			// CloudScriptParser.g:198:53: ( FN NAME ( OPEN_PARENT ( parameters )? CLOSE_PARENT )? terminator expressions END )
			DebugEnterAlt(1);
			// CloudScriptParser.g:199:5: FN NAME ( OPEN_PARENT ( parameters )? CLOSE_PARENT )? terminator expressions END
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(199, 5);
			FN57=(IToken)Match(input,FN,Follow._FN_in_methodDefinition1532); if (state.failed) return retval;
			if (state.backtracking == 0) {
			FN57_tree = (object)adaptor.Create(FN57);
			adaptor.AddChild(root_0, FN57_tree);
			}
			DebugLocation(199, 8);
			NAME58=(IToken)Match(input,NAME,Follow._NAME_in_methodDefinition1534); if (state.failed) return retval;
			if (state.backtracking == 0) {
			NAME58_tree = (object)adaptor.Create(NAME58);
			adaptor.AddChild(root_0, NAME58_tree);
			}
			DebugLocation(199, 13);
			// CloudScriptParser.g:199:13: ( OPEN_PARENT ( parameters )? CLOSE_PARENT )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==OPEN_PARENT))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:199:14: OPEN_PARENT ( parameters )? CLOSE_PARENT
				{
				DebugLocation(199, 14);
				OPEN_PARENT59=(IToken)Match(input,OPEN_PARENT,Follow._OPEN_PARENT_in_methodDefinition1537); if (state.failed) return retval;
				if (state.backtracking == 0) {
				OPEN_PARENT59_tree = (object)adaptor.Create(OPEN_PARENT59);
				adaptor.AddChild(root_0, OPEN_PARENT59_tree);
				}
				DebugLocation(199, 26);
				// CloudScriptParser.g:199:26: ( parameters )?
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_1 = input.LA(1);

				if ((LA20_1==NAME))
				{
					alt20 = 1;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// CloudScriptParser.g:199:26: parameters
					{
					DebugLocation(199, 26);
					PushFollow(Follow._parameters_in_methodDefinition1539);
					parameters60=parameters();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, parameters60.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(20); }

				DebugLocation(199, 38);
				CLOSE_PARENT61=(IToken)Match(input,CLOSE_PARENT,Follow._CLOSE_PARENT_in_methodDefinition1542); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CLOSE_PARENT61_tree = (object)adaptor.Create(CLOSE_PARENT61);
				adaptor.AddChild(root_0, CLOSE_PARENT61_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(199, 53);
			PushFollow(Follow._terminator_in_methodDefinition1546);
			terminator62=terminator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, terminator62.Tree);
			DebugLocation(200, 7);
			PushFollow(Follow._expressions_in_methodDefinition1554);
			expressions63=expressions();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expressions63.Tree);
			DebugLocation(201, 5);
			END64=(IToken)Match(input,END,Follow._END_in_methodDefinition1560); if (state.failed) return retval;
			if (state.backtracking == 0) {
			END64_tree = (object)adaptor.Create(END64);
			adaptor.AddChild(root_0, END64_tree);
			}
			DebugLocation(201, 37);
			if (state.backtracking == 0)
			{
				 retval.node = new MethodDefinitionNode((NAME58!=null?NAME58.Text:null), (parameters60!=null?parameters60.names:default(ArrayList<String>)), (expressions63!=null?expressions63.nodes:default(Nodes))); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("methodDefinition", 21);
			LeaveRule("methodDefinition", 21);
			LeaveRule_methodDefinition();
		}
		DebugLocation(202, 2);
		} finally { DebugExitRule(GrammarFileName, "methodDefinition"); }
		return retval;

	}
	// $ANTLR end "methodDefinition"

	private sealed partial class parameters_return : AstParserRuleReturnScope<object, IToken>
	{
		public ArrayList<String> names;
		public parameters_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_parameters();
	partial void LeaveRule_parameters();
	// $ANTLR start "parameters"
	// CloudScriptParser.g:205:1: parameters returns [ArrayList<String> names] :head= NAME ( COMMA tail= NAME )* ;
	[GrammarRule("parameters")]
	private CloudScriptParser.parameters_return parameters()
	{
		EnterRule_parameters();
		EnterRule("parameters", 22);
		TraceIn("parameters", 22);
		CloudScriptParser.parameters_return retval = new CloudScriptParser.parameters_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken head = default(IToken);
		IToken tail = default(IToken);
		IToken COMMA65 = default(IToken);

		object head_tree = default(object);
		object tail_tree = default(object);
		object COMMA65_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parameters");
		DebugLocation(205, 2);
		try
		{
			// CloudScriptParser.g:205:45: (head= NAME ( COMMA tail= NAME )* )
			DebugEnterAlt(1);
			// CloudScriptParser.g:206:37: head= NAME ( COMMA tail= NAME )*
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(206, 37);
			if (state.backtracking == 0)
			{
				 retval.names = new ArrayList<String>(); 
			}
			DebugLocation(207, 9);
			head=(IToken)Match(input,NAME,Follow._NAME_in_parameters1649); if (state.failed) return retval;
			if (state.backtracking == 0) {
			head_tree = (object)adaptor.Create(head);
			adaptor.AddChild(root_0, head_tree);
			}
			DebugLocation(207, 37);
			if (state.backtracking == 0)
			{
				 retval.names.add((head!=null?head.Text:null)); 
			}
			DebugLocation(208, 5);
			// CloudScriptParser.g:208:5: ( COMMA tail= NAME )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_1 = input.LA(1);

				if ((LA22_1==COMMA))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// CloudScriptParser.g:208:6: COMMA tail= NAME
					{
					DebugLocation(208, 6);
					COMMA65=(IToken)Match(input,COMMA,Follow._COMMA_in_parameters1680); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA65_tree = (object)adaptor.Create(COMMA65);
					adaptor.AddChild(root_0, COMMA65_tree);
					}
					DebugLocation(209, 10);
					tail=(IToken)Match(input,NAME,Follow._NAME_in_parameters1689); if (state.failed) return retval;
					if (state.backtracking == 0) {
					tail_tree = (object)adaptor.Create(tail);
					adaptor.AddChild(root_0, tail_tree);
					}
					DebugLocation(209, 37);
					if (state.backtracking == 0)
					{
						 retval.names.add((tail!=null?tail.Text:null)); 
					}

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("parameters", 22);
			LeaveRule("parameters", 22);
			LeaveRule_parameters();
		}
		DebugLocation(211, 2);
		} finally { DebugExitRule(GrammarFileName, "parameters"); }
		return retval;

	}
	// $ANTLR end "parameters"

	private sealed partial class classDefinition_return : AstParserRuleReturnScope<object, IToken>
	{
		public ClassDefinitionNode node;
		public classDefinition_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_classDefinition();
	partial void LeaveRule_classDefinition();
	// $ANTLR start "classDefinition"
	// CloudScriptParser.g:213:1: classDefinition returns [ClassDefinitionNode node] : CLASS name= CONSTANT ( LT superClass= CONSTANT )? terminator expressions END ;
	[GrammarRule("classDefinition")]
	private CloudScriptParser.classDefinition_return classDefinition()
	{
		EnterRule_classDefinition();
		EnterRule("classDefinition", 23);
		TraceIn("classDefinition", 23);
		CloudScriptParser.classDefinition_return retval = new CloudScriptParser.classDefinition_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken name = default(IToken);
		IToken superClass = default(IToken);
		IToken CLASS66 = default(IToken);
		IToken LT67 = default(IToken);
		IToken END70 = default(IToken);
		AstParserRuleReturnScope<object, IToken> terminator68 = default(AstParserRuleReturnScope<object, IToken>);
		CloudScriptParser.expressions_return expressions69 = default(CloudScriptParser.expressions_return);

		object name_tree = default(object);
		object superClass_tree = default(object);
		object CLASS66_tree = default(object);
		object LT67_tree = default(object);
		object END70_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "classDefinition");
		DebugLocation(213, 2);
		try
		{
			// CloudScriptParser.g:213:51: ( CLASS name= CONSTANT ( LT superClass= CONSTANT )? terminator expressions END )
			DebugEnterAlt(1);
			// CloudScriptParser.g:214:5: CLASS name= CONSTANT ( LT superClass= CONSTANT )? terminator expressions END
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(214, 5);
			CLASS66=(IToken)Match(input,CLASS,Follow._CLASS_in_classDefinition1737); if (state.failed) return retval;
			if (state.backtracking == 0) {
			CLASS66_tree = (object)adaptor.Create(CLASS66);
			adaptor.AddChild(root_0, CLASS66_tree);
			}
			DebugLocation(214, 15);
			name=(IToken)Match(input,CONSTANT,Follow._CONSTANT_in_classDefinition1741); if (state.failed) return retval;
			if (state.backtracking == 0) {
			name_tree = (object)adaptor.Create(name);
			adaptor.AddChild(root_0, name_tree);
			}
			DebugLocation(214, 25);
			// CloudScriptParser.g:214:25: ( LT superClass= CONSTANT )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_1 = input.LA(1);

			if ((LA23_1==LT))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:214:26: LT superClass= CONSTANT
				{
				DebugLocation(214, 26);
				LT67=(IToken)Match(input,LT,Follow._LT_in_classDefinition1744); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LT67_tree = (object)adaptor.Create(LT67);
				adaptor.AddChild(root_0, LT67_tree);
				}
				DebugLocation(214, 39);
				superClass=(IToken)Match(input,CONSTANT,Follow._CONSTANT_in_classDefinition1748); if (state.failed) return retval;
				if (state.backtracking == 0) {
				superClass_tree = (object)adaptor.Create(superClass);
				adaptor.AddChild(root_0, superClass_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(23); }

			DebugLocation(214, 51);
			PushFollow(Follow._terminator_in_classDefinition1752);
			terminator68=terminator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, terminator68.Tree);
			DebugLocation(215, 7);
			PushFollow(Follow._expressions_in_classDefinition1760);
			expressions69=expressions();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expressions69.Tree);
			DebugLocation(216, 5);
			END70=(IToken)Match(input,END,Follow._END_in_classDefinition1766); if (state.failed) return retval;
			if (state.backtracking == 0) {
			END70_tree = (object)adaptor.Create(END70);
			adaptor.AddChild(root_0, END70_tree);
			}
			DebugLocation(216, 37);
			if (state.backtracking == 0)
			{
				 retval.node = new ClassDefinitionNode((name!=null?name.Text:null), (superClass!=null?superClass.Text:null), (expressions69!=null?expressions69.nodes:default(Nodes))); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("classDefinition", 23);
			LeaveRule("classDefinition", 23);
			LeaveRule_classDefinition();
		}
		DebugLocation(217, 2);
		} finally { DebugExitRule(GrammarFileName, "classDefinition"); }
		return retval;

	}
	// $ANTLR end "classDefinition"

	private sealed partial class ifBlock_return : AstParserRuleReturnScope<object, IToken>
	{
		public IfNode node;
		public ifBlock_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_ifBlock();
	partial void LeaveRule_ifBlock();
	// $ANTLR start "ifBlock"
	// CloudScriptParser.g:219:1: ifBlock returns [IfNode node] : IF condition= expression terminator ifBody= expressions ( ELSE terminator elseBody= expressions )? END ;
	[GrammarRule("ifBlock")]
	private CloudScriptParser.ifBlock_return ifBlock()
	{
		EnterRule_ifBlock();
		EnterRule("ifBlock", 24);
		TraceIn("ifBlock", 24);
		CloudScriptParser.ifBlock_return retval = new CloudScriptParser.ifBlock_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken IF71 = default(IToken);
		IToken ELSE73 = default(IToken);
		IToken END75 = default(IToken);
		CloudScriptParser.expression_return condition = default(CloudScriptParser.expression_return);
		CloudScriptParser.expressions_return ifBody = default(CloudScriptParser.expressions_return);
		CloudScriptParser.expressions_return elseBody = default(CloudScriptParser.expressions_return);
		AstParserRuleReturnScope<object, IToken> terminator72 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> terminator74 = default(AstParserRuleReturnScope<object, IToken>);

		object IF71_tree = default(object);
		object ELSE73_tree = default(object);
		object END75_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "ifBlock");
		DebugLocation(219, 2);
		try
		{
			// CloudScriptParser.g:219:30: ( IF condition= expression terminator ifBody= expressions ( ELSE terminator elseBody= expressions )? END )
			DebugEnterAlt(1);
			// CloudScriptParser.g:220:5: IF condition= expression terminator ifBody= expressions ( ELSE terminator elseBody= expressions )? END
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(220, 5);
			IF71=(IToken)Match(input,IF,Follow._IF_in_ifBlock1814); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IF71_tree = (object)adaptor.Create(IF71);
			adaptor.AddChild(root_0, IF71_tree);
			}
			DebugLocation(220, 17);
			PushFollow(Follow._expression_in_ifBlock1818);
			condition=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, condition.Tree);
			DebugLocation(220, 29);
			PushFollow(Follow._terminator_in_ifBlock1820);
			terminator72=terminator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, terminator72.Tree);
			DebugLocation(221, 13);
			PushFollow(Follow._expressions_in_ifBlock1830);
			ifBody=expressions();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ifBody.Tree);
			DebugLocation(222, 5);
			// CloudScriptParser.g:222:5: ( ELSE terminator elseBody= expressions )?
			int alt24=2;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			int LA24_1 = input.LA(1);

			if ((LA24_1==ELSE))
			{
				alt24 = 1;
			}
			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// CloudScriptParser.g:222:6: ELSE terminator elseBody= expressions
				{
				DebugLocation(222, 6);
				ELSE73=(IToken)Match(input,ELSE,Follow._ELSE_in_ifBlock1837); if (state.failed) return retval;
				if (state.backtracking == 0) {
				ELSE73_tree = (object)adaptor.Create(ELSE73);
				adaptor.AddChild(root_0, ELSE73_tree);
				}
				DebugLocation(222, 11);
				PushFollow(Follow._terminator_in_ifBlock1839);
				terminator74=terminator();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, terminator74.Tree);
				DebugLocation(223, 15);
				PushFollow(Follow._expressions_in_ifBlock1849);
				elseBody=expressions();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, elseBody.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(225, 5);
			END75=(IToken)Match(input,END,Follow._END_in_ifBlock1862); if (state.failed) return retval;
			if (state.backtracking == 0) {
			END75_tree = (object)adaptor.Create(END75);
			adaptor.AddChild(root_0, END75_tree);
			}
			DebugLocation(225, 37);
			if (state.backtracking == 0)
			{
				 retval.node = new IfNode((condition!=null?condition.node:default(Node)), (ifBody!=null?ifBody.nodes:default(Nodes)), (elseBody!=null?elseBody.nodes:default(Nodes))); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("ifBlock", 24);
			LeaveRule("ifBlock", 24);
			LeaveRule_ifBlock();
		}
		DebugLocation(226, 2);
		} finally { DebugExitRule(GrammarFileName, "ifBlock"); }
		return retval;

	}
	// $ANTLR end "ifBlock"

	private sealed partial class whileBlock_return : AstParserRuleReturnScope<object, IToken>
	{
		public WhileNode node;
		public whileBlock_return(CloudScriptParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CloudScriptParser grammar);
	}

	partial void EnterRule_whileBlock();
	partial void LeaveRule_whileBlock();
	// $ANTLR start "whileBlock"
	// CloudScriptParser.g:228:1: whileBlock returns [WhileNode node] : WHILE condition= expression terminator body= expressions END ;
	[GrammarRule("whileBlock")]
	private CloudScriptParser.whileBlock_return whileBlock()
	{
		EnterRule_whileBlock();
		EnterRule("whileBlock", 25);
		TraceIn("whileBlock", 25);
		CloudScriptParser.whileBlock_return retval = new CloudScriptParser.whileBlock_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken WHILE76 = default(IToken);
		IToken END78 = default(IToken);
		CloudScriptParser.expression_return condition = default(CloudScriptParser.expression_return);
		CloudScriptParser.expressions_return body = default(CloudScriptParser.expressions_return);
		AstParserRuleReturnScope<object, IToken> terminator77 = default(AstParserRuleReturnScope<object, IToken>);

		object WHILE76_tree = default(object);
		object END78_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "whileBlock");
		DebugLocation(228, 2);
		try
		{
			// CloudScriptParser.g:228:36: ( WHILE condition= expression terminator body= expressions END )
			DebugEnterAlt(1);
			// CloudScriptParser.g:229:5: WHILE condition= expression terminator body= expressions END
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(229, 5);
			WHILE76=(IToken)Match(input,WHILE,Follow._WHILE_in_whileBlock1910); if (state.failed) return retval;
			if (state.backtracking == 0) {
			WHILE76_tree = (object)adaptor.Create(WHILE76);
			adaptor.AddChild(root_0, WHILE76_tree);
			}
			DebugLocation(229, 20);
			PushFollow(Follow._expression_in_whileBlock1914);
			condition=expression();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, condition.Tree);
			DebugLocation(229, 32);
			PushFollow(Follow._terminator_in_whileBlock1916);
			terminator77=terminator();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, terminator77.Tree);
			DebugLocation(230, 11);
			PushFollow(Follow._expressions_in_whileBlock1926);
			body=expressions();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, body.Tree);
			DebugLocation(231, 5);
			END78=(IToken)Match(input,END,Follow._END_in_whileBlock1932); if (state.failed) return retval;
			if (state.backtracking == 0) {
			END78_tree = (object)adaptor.Create(END78);
			adaptor.AddChild(root_0, END78_tree);
			}
			DebugLocation(231, 37);
			if (state.backtracking == 0)
			{
				 retval.node = new WhileNode((condition!=null?condition.node:default(Node)), (body!=null?body.nodes:default(Nodes))); 
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}

		  catch(RecognitionException recognitionException) {
		    throw recognitionException;
		  }

		finally
		{
			TraceOut("whileBlock", 25);
			LeaveRule("whileBlock", 25);
			LeaveRule_whileBlock();
		}
		DebugLocation(232, 2);
		} finally { DebugExitRule(GrammarFileName, "whileBlock"); }
		return retval;

	}
	// $ANTLR end "whileBlock"

	partial void EnterRule_synpred8_CloudScriptParser_fragment();
	partial void LeaveRule_synpred8_CloudScriptParser_fragment();

	// $ANTLR start synpred8_CloudScriptParser
	public void synpred8_CloudScriptParser_fragment()
	{
		CloudScriptParser.andExpression_return receiver = default(CloudScriptParser.andExpression_return);
		CloudScriptParser.orExpression_return arg = default(CloudScriptParser.orExpression_return);

		EnterRule_synpred8_CloudScriptParser_fragment();
		EnterRule("synpred8_CloudScriptParser_fragment", 33);
		TraceIn("synpred8_CloudScriptParser_fragment", 33);
		try
		{
			// CloudScriptParser.g:87:5: (receiver= andExpression OR arg= orExpression )
			DebugEnterAlt(1);
			// CloudScriptParser.g:87:5: receiver= andExpression OR arg= orExpression
			{
			DebugLocation(87, 13);
			PushFollow(Follow._andExpression_in_synpred8_CloudScriptParser285);
			receiver=andExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(88, 7);
			Match(input,OR,Follow._OR_in_synpred8_CloudScriptParser293); if (state.failed) return;
			DebugLocation(88, 13);
			PushFollow(Follow._orExpression_in_synpred8_CloudScriptParser297);
			arg=orExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred8_CloudScriptParser_fragment", 33);
			LeaveRule("synpred8_CloudScriptParser_fragment", 33);
			LeaveRule_synpred8_CloudScriptParser_fragment();
		}
	}
	// $ANTLR end synpred8_CloudScriptParser

	partial void EnterRule_synpred9_CloudScriptParser_fragment();
	partial void LeaveRule_synpred9_CloudScriptParser_fragment();

	// $ANTLR start synpred9_CloudScriptParser
	public void synpred9_CloudScriptParser_fragment()
	{
		CloudScriptParser.relationalExpression_return receiver = default(CloudScriptParser.relationalExpression_return);
		CloudScriptParser.andExpression_return arg = default(CloudScriptParser.andExpression_return);

		EnterRule_synpred9_CloudScriptParser_fragment();
		EnterRule("synpred9_CloudScriptParser_fragment", 34);
		TraceIn("synpred9_CloudScriptParser_fragment", 34);
		try
		{
			// CloudScriptParser.g:93:5: (receiver= relationalExpression AND arg= andExpression )
			DebugEnterAlt(1);
			// CloudScriptParser.g:93:5: receiver= relationalExpression AND arg= andExpression
			{
			DebugLocation(93, 13);
			PushFollow(Follow._relationalExpression_in_synpred9_CloudScriptParser347);
			receiver=relationalExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(94, 7);
			Match(input,AND,Follow._AND_in_synpred9_CloudScriptParser355); if (state.failed) return;
			DebugLocation(94, 14);
			PushFollow(Follow._andExpression_in_synpred9_CloudScriptParser359);
			arg=andExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred9_CloudScriptParser_fragment", 34);
			LeaveRule("synpred9_CloudScriptParser_fragment", 34);
			LeaveRule_synpred9_CloudScriptParser_fragment();
		}
	}
	// $ANTLR end synpred9_CloudScriptParser

	partial void EnterRule_synpred14_CloudScriptParser_fragment();
	partial void LeaveRule_synpred14_CloudScriptParser_fragment();

	// $ANTLR start synpred14_CloudScriptParser
	public void synpred14_CloudScriptParser_fragment()
	{
		IToken op = default(IToken);
		CloudScriptParser.additiveExpression_return receiver = default(CloudScriptParser.additiveExpression_return);
		CloudScriptParser.relationalExpression_return arg = default(CloudScriptParser.relationalExpression_return);

		EnterRule_synpred14_CloudScriptParser_fragment();
		EnterRule("synpred14_CloudScriptParser_fragment", 39);
		TraceIn("synpred14_CloudScriptParser_fragment", 39);
		try
		{
			// CloudScriptParser.g:99:5: (receiver= additiveExpression op= ( EQ | LE | GE | LT | GT ) arg= relationalExpression )
			DebugEnterAlt(1);
			// CloudScriptParser.g:99:5: receiver= additiveExpression op= ( EQ | LE | GE | LT | GT ) arg= relationalExpression
			{
			DebugLocation(99, 13);
			PushFollow(Follow._additiveExpression_in_synpred14_CloudScriptParser400);
			receiver=additiveExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(100, 9);

			op=(IToken)input.LT(1);
			if ((input.LA(1)>=EQ && input.LA(1)<=GT))
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(101, 10);
			PushFollow(Follow._relationalExpression_in_synpred14_CloudScriptParser430);
			arg=relationalExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred14_CloudScriptParser_fragment", 39);
			LeaveRule("synpred14_CloudScriptParser_fragment", 39);
			LeaveRule_synpred14_CloudScriptParser_fragment();
		}
	}
	// $ANTLR end synpred14_CloudScriptParser

	partial void EnterRule_synpred16_CloudScriptParser_fragment();
	partial void LeaveRule_synpred16_CloudScriptParser_fragment();

	// $ANTLR start synpred16_CloudScriptParser
	public void synpred16_CloudScriptParser_fragment()
	{
		IToken op = default(IToken);
		CloudScriptParser.multiplicativeExpression_return receiver = default(CloudScriptParser.multiplicativeExpression_return);
		CloudScriptParser.additiveExpression_return arg = default(CloudScriptParser.additiveExpression_return);

		EnterRule_synpred16_CloudScriptParser_fragment();
		EnterRule("synpred16_CloudScriptParser_fragment", 41);
		TraceIn("synpred16_CloudScriptParser_fragment", 41);
		try
		{
			// CloudScriptParser.g:106:5: (receiver= multiplicativeExpression op= ( PLUS | MINUS ) arg= additiveExpression )
			DebugEnterAlt(1);
			// CloudScriptParser.g:106:5: receiver= multiplicativeExpression op= ( PLUS | MINUS ) arg= additiveExpression
			{
			DebugLocation(106, 13);
			PushFollow(Follow._multiplicativeExpression_in_synpred16_CloudScriptParser470);
			receiver=multiplicativeExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(107, 9);

			op=(IToken)input.LT(1);
			if ((input.LA(1)>=PLUS && input.LA(1)<=MINUS))
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(107, 26);
			PushFollow(Follow._additiveExpression_in_synpred16_CloudScriptParser488);
			arg=additiveExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred16_CloudScriptParser_fragment", 41);
			LeaveRule("synpred16_CloudScriptParser_fragment", 41);
			LeaveRule_synpred16_CloudScriptParser_fragment();
		}
	}
	// $ANTLR end synpred16_CloudScriptParser

	partial void EnterRule_synpred19_CloudScriptParser_fragment();
	partial void LeaveRule_synpred19_CloudScriptParser_fragment();

	// $ANTLR start synpred19_CloudScriptParser
	public void synpred19_CloudScriptParser_fragment()
	{
		IToken op = default(IToken);
		CloudScriptParser.unaryExpression_return receiver = default(CloudScriptParser.unaryExpression_return);
		CloudScriptParser.multiplicativeExpression_return arg = default(CloudScriptParser.multiplicativeExpression_return);

		EnterRule_synpred19_CloudScriptParser_fragment();
		EnterRule("synpred19_CloudScriptParser_fragment", 44);
		TraceIn("synpred19_CloudScriptParser_fragment", 44);
		try
		{
			// CloudScriptParser.g:112:5: (receiver= unaryExpression op= ( MUL | DIV | MOD ) arg= multiplicativeExpression )
			DebugEnterAlt(1);
			// CloudScriptParser.g:112:5: receiver= unaryExpression op= ( MUL | DIV | MOD ) arg= multiplicativeExpression
			{
			DebugLocation(112, 13);
			PushFollow(Follow._unaryExpression_in_synpred19_CloudScriptParser536);
			receiver=unaryExpression();
			PopFollow();
			if (state.failed) return;
			DebugLocation(113, 9);

			op=(IToken)input.LT(1);
			if ((input.LA(1)>=MUL && input.LA(1)<=MOD))
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(113, 27);
			PushFollow(Follow._multiplicativeExpression_in_synpred19_CloudScriptParser556);
			arg=multiplicativeExpression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred19_CloudScriptParser_fragment", 44);
			LeaveRule("synpred19_CloudScriptParser_fragment", 44);
			LeaveRule_synpred19_CloudScriptParser_fragment();
		}
	}
	// $ANTLR end synpred19_CloudScriptParser

	partial void EnterRule_synpred37_CloudScriptParser_fragment();
	partial void LeaveRule_synpred37_CloudScriptParser_fragment();

	// $ANTLR start synpred37_CloudScriptParser
	public void synpred37_CloudScriptParser_fragment()
	{
		CloudScriptParser.message_return head = default(CloudScriptParser.message_return);

		EnterRule_synpred37_CloudScriptParser_fragment();
		EnterRule("synpred37_CloudScriptParser_fragment", 62);
		TraceIn("synpred37_CloudScriptParser_fragment", 62);
		try
		{
			// CloudScriptParser.g:163:6: (head= message DOT )
			DebugEnterAlt(1);
			// CloudScriptParser.g:163:6: head= message DOT
			{
			DebugLocation(163, 10);
			PushFollow(Follow._message_in_synpred37_CloudScriptParser1116);
			head=message();
			PopFollow();
			if (state.failed) return;
			DebugLocation(163, 19);
			Match(input,DOT,Follow._DOT_in_synpred37_CloudScriptParser1118); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred37_CloudScriptParser_fragment", 62);
			LeaveRule("synpred37_CloudScriptParser_fragment", 62);
			LeaveRule_synpred37_CloudScriptParser_fragment();
		}
	}
	// $ANTLR end synpred37_CloudScriptParser
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA3 dfa3;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa3 = new DFA3( this );
	}

	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x4\xFFFF";
		private const string DFA3_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA3_minS =
			"\x1\x7\x1\x4\x2\xFFFF";
		private const string DFA3_maxS =
			"\x2\x2F\x2\xFFFF";
		private const string DFA3_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA3_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\x1\x2\x1\xFFFF\x1\x2\x10\xFFFF\x1\x1\x14\xFFFF\x1\x1",
				"\x3\x3\x1\x2\x1\x3\x1\x2\x6\x3\x2\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF"+
				"\x1\x3\x1\xFFFF\x1\x3\x1\x1\x3\xFFFF\x1\x3\x1\xFFFF\x1\x3\xC\xFFFF\x1"+
				"\x3\x1\xFFFF\x1\x1",
				"",
				""
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "()* loopback of 63:5: ( terminator tail= expression )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _terminator_in_root77 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _expressions_in_root80 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root83 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressions131 = new BitSet(new ulong[]{0x800004000002UL});
		public static readonly BitSet _terminator_in_expressions142 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _expression_in_expressions151 = new BitSet(new ulong[]{0x800004000002UL});
		public static readonly BitSet _terminator_in_expressions167 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignExpression_in_expression187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assign_in_assignExpression231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orExpression_in_assignExpression256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _andExpression_in_orExpression285 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _OR_in_orExpression293 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _orExpression_in_orExpression297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _andExpression_in_orExpression313 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _relationalExpression_in_andExpression347 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _AND_in_andExpression355 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _andExpression_in_andExpression359 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _relationalExpression_in_andExpression373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _additiveExpression_in_relationalExpression400 = new BitSet(new ulong[]{0x3E00000000UL});
		public static readonly BitSet _set_in_relationalExpression410 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _relationalExpression_in_relationalExpression430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _additiveExpression_in_relationalExpression441 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression470 = new BitSet(new ulong[]{0xC000000000UL});
		public static readonly BitSet _set_in_additiveExpression480 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _additiveExpression_in_additiveExpression488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression536 = new BitSet(new ulong[]{0x70000000000UL});
		public static readonly BitSet _set_in_multiplicativeExpression546 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _multiplicativeExpression_in_multiplicativeExpression556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression567 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_unaryExpression618 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression622 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primaryExpression674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _call_in_primaryExpression692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _methodDefinition_in_primaryExpression713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _classDefinition_in_primaryExpression722 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifBlock_in_primaryExpression732 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileBlock_in_primaryExpression750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OPEN_PARENT_in_primaryExpression765 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _expression_in_primaryExpression773 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _CLOSE_PARENT_in_primaryExpression779 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_literal805 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTEGER_in_literal824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOAT_in_literal842 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NIL_in_literal862 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TRUE_in_literal884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FALSE_in_literal905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constant_in_literal925 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _instanceVariable_in_literal942 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _self_in_literal951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _URL_in_literal972 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELF_in_self1007 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PRIV_in_instanceVariable1041 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _NAME_in_instanceVariable1043 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_call1075 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _DOT_in_call1077 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _message_in_call1116 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _DOT_in_call1118 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _message_in_call1151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_message1191 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_message1226 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _OPEN_PARENT_in_message1228 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _CLOSE_PARENT_in_message1230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_message1240 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _OPEN_PARENT_in_message1242 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _arguments_in_message1255 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _CLOSE_PARENT_in_message1266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_arguments1341 = new BitSet(new ulong[]{0x20000002UL});
		public static readonly BitSet _COMMA_in_arguments1366 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _expression_in_arguments1375 = new BitSet(new ulong[]{0x20000002UL});
		public static readonly BitSet _CONSTANT_in_constant1418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_assign1462 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ASSIGN_in_assign1464 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _expression_in_assign1466 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONSTANT_in_assign1483 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ASSIGN_in_assign1485 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _expression_in_assign1487 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PRIV_in_assign1500 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _NAME_in_assign1502 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _ASSIGN_in_assign1504 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _expression_in_assign1506 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FN_in_methodDefinition1532 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _NAME_in_methodDefinition1534 = new BitSet(new ulong[]{0x800044000000UL});
		public static readonly BitSet _OPEN_PARENT_in_methodDefinition1537 = new BitSet(new ulong[]{0x80200000UL});
		public static readonly BitSet _parameters_in_methodDefinition1539 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _CLOSE_PARENT_in_methodDefinition1542 = new BitSet(new ulong[]{0x800004000000UL});
		public static readonly BitSet _terminator_in_methodDefinition1546 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _expressions_in_methodDefinition1554 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _END_in_methodDefinition1560 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NAME_in_parameters1649 = new BitSet(new ulong[]{0x20000002UL});
		public static readonly BitSet _COMMA_in_parameters1680 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _NAME_in_parameters1689 = new BitSet(new ulong[]{0x20000002UL});
		public static readonly BitSet _CLASS_in_classDefinition1737 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CONSTANT_in_classDefinition1741 = new BitSet(new ulong[]{0x801004000000UL});
		public static readonly BitSet _LT_in_classDefinition1744 = new BitSet(new ulong[]{0x800000UL});
		public static readonly BitSet _CONSTANT_in_classDefinition1748 = new BitSet(new ulong[]{0x800004000000UL});
		public static readonly BitSet _terminator_in_classDefinition1752 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _expressions_in_classDefinition1760 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _END_in_classDefinition1766 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IF_in_ifBlock1814 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _expression_in_ifBlock1818 = new BitSet(new ulong[]{0x800004000000UL});
		public static readonly BitSet _terminator_in_ifBlock1820 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _expressions_in_ifBlock1830 = new BitSet(new ulong[]{0x280UL});
		public static readonly BitSet _ELSE_in_ifBlock1837 = new BitSet(new ulong[]{0x800004000000UL});
		public static readonly BitSet _terminator_in_ifBlock1839 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _expressions_in_ifBlock1849 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _END_in_ifBlock1862 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHILE_in_whileBlock1910 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _expression_in_whileBlock1914 = new BitSet(new ulong[]{0x800004000000UL});
		public static readonly BitSet _terminator_in_whileBlock1916 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _expressions_in_whileBlock1926 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _END_in_whileBlock1932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _andExpression_in_synpred8_CloudScriptParser285 = new BitSet(new ulong[]{0x100000000000UL});
		public static readonly BitSet _OR_in_synpred8_CloudScriptParser293 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _orExpression_in_synpred8_CloudScriptParser297 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _relationalExpression_in_synpred9_CloudScriptParser347 = new BitSet(new ulong[]{0x80000000000UL});
		public static readonly BitSet _AND_in_synpred9_CloudScriptParser355 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _andExpression_in_synpred9_CloudScriptParser359 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _additiveExpression_in_synpred14_CloudScriptParser400 = new BitSet(new ulong[]{0x3E00000000UL});
		public static readonly BitSet _set_in_synpred14_CloudScriptParser410 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _relationalExpression_in_synpred14_CloudScriptParser430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multiplicativeExpression_in_synpred16_CloudScriptParser470 = new BitSet(new ulong[]{0xC000000000UL});
		public static readonly BitSet _set_in_synpred16_CloudScriptParser480 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _additiveExpression_in_synpred16_CloudScriptParser488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpression_in_synpred19_CloudScriptParser536 = new BitSet(new ulong[]{0x70000000000UL});
		public static readonly BitSet _set_in_synpred19_CloudScriptParser546 = new BitSet(new ulong[]{0x200142A4FD70UL});
		public static readonly BitSet _multiplicativeExpression_in_synpred19_CloudScriptParser556 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _message_in_synpred37_CloudScriptParser1116 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _DOT_in_synpred37_CloudScriptParser1118 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
