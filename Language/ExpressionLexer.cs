//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 Expression.g 2012-04-30 14:09:17

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class ExpressionLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int Number=4;
	public const int Space=5;
	public const int T__6=6;
	public const int T__7=7;
	public const int T__8=8;
	public const int T__9=9;
	public const int T__10=10;
	public const int T__11=11;

    // delegates
    // delegators

	public ExpressionLexer()
	{
		OnCreated();
	}

	public ExpressionLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public ExpressionLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "Expression.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__6() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__6() {}

    // $ANTLR start "T__6"
    [GrammarRule("T__6")]
    private void mT__6()
    {
    	EnterRule_T__6();
    	EnterRule("T__6", 1);
    	TraceIn("T__6", 1);
    		try
    		{
    		int _type = T__6;
    		int _channel = DefaultTokenChannel;
    		// Expression.g:7:6: ( '(' )
    		DebugEnterAlt(1);
    		// Expression.g:7:8: '('
    		{
    		DebugLocation(7, 8);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__6", 1);
    		LeaveRule("T__6", 1);
    		LeaveRule_T__6();
        }
    }
    // $ANTLR end "T__6"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__7() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__7() {}

    // $ANTLR start "T__7"
    [GrammarRule("T__7")]
    private void mT__7()
    {
    	EnterRule_T__7();
    	EnterRule("T__7", 2);
    	TraceIn("T__7", 2);
    		try
    		{
    		int _type = T__7;
    		int _channel = DefaultTokenChannel;
    		// Expression.g:8:6: ( ')' )
    		DebugEnterAlt(1);
    		// Expression.g:8:8: ')'
    		{
    		DebugLocation(8, 8);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__7", 2);
    		LeaveRule("T__7", 2);
    		LeaveRule_T__7();
        }
    }
    // $ANTLR end "T__7"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__8() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__8() {}

    // $ANTLR start "T__8"
    [GrammarRule("T__8")]
    private void mT__8()
    {
    	EnterRule_T__8();
    	EnterRule("T__8", 3);
    	TraceIn("T__8", 3);
    		try
    		{
    		int _type = T__8;
    		int _channel = DefaultTokenChannel;
    		// Expression.g:9:6: ( '*' )
    		DebugEnterAlt(1);
    		// Expression.g:9:8: '*'
    		{
    		DebugLocation(9, 8);
    		Match('*'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__8", 3);
    		LeaveRule("T__8", 3);
    		LeaveRule_T__8();
        }
    }
    // $ANTLR end "T__8"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__9() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__9() {}

    // $ANTLR start "T__9"
    [GrammarRule("T__9")]
    private void mT__9()
    {
    	EnterRule_T__9();
    	EnterRule("T__9", 4);
    	TraceIn("T__9", 4);
    		try
    		{
    		int _type = T__9;
    		int _channel = DefaultTokenChannel;
    		// Expression.g:10:6: ( '+' )
    		DebugEnterAlt(1);
    		// Expression.g:10:8: '+'
    		{
    		DebugLocation(10, 8);
    		Match('+'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__9", 4);
    		LeaveRule("T__9", 4);
    		LeaveRule_T__9();
        }
    }
    // $ANTLR end "T__9"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__10() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__10() {}

    // $ANTLR start "T__10"
    [GrammarRule("T__10")]
    private void mT__10()
    {
    	EnterRule_T__10();
    	EnterRule("T__10", 5);
    	TraceIn("T__10", 5);
    		try
    		{
    		int _type = T__10;
    		int _channel = DefaultTokenChannel;
    		// Expression.g:11:7: ( '-' )
    		DebugEnterAlt(1);
    		// Expression.g:11:9: '-'
    		{
    		DebugLocation(11, 9);
    		Match('-'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__10", 5);
    		LeaveRule("T__10", 5);
    		LeaveRule_T__10();
        }
    }
    // $ANTLR end "T__10"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__11() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__11() {}

    // $ANTLR start "T__11"
    [GrammarRule("T__11")]
    private void mT__11()
    {
    	EnterRule_T__11();
    	EnterRule("T__11", 6);
    	TraceIn("T__11", 6);
    		try
    		{
    		int _type = T__11;
    		int _channel = DefaultTokenChannel;
    		// Expression.g:12:7: ( '/' )
    		DebugEnterAlt(1);
    		// Expression.g:12:9: '/'
    		{
    		DebugLocation(12, 9);
    		Match('/'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__11", 6);
    		LeaveRule("T__11", 6);
    		LeaveRule_T__11();
        }
    }
    // $ANTLR end "T__11"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_Number() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_Number() {}

    // $ANTLR start "Number"
    [GrammarRule("Number")]
    private void mNumber()
    {
    	EnterRule_Number();
    	EnterRule("Number", 7);
    	TraceIn("Number", 7);
    		try
    		{
    		int _type = Number;
    		int _channel = DefaultTokenChannel;
    		// Expression.g:40:3: ( ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? )
    		DebugEnterAlt(1);
    		// Expression.g:40:6: ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )?
    		{
    		DebugLocation(40, 6);
    		// Expression.g:40:6: ( '0' .. '9' )+
    		int cnt1=0;
    		try { DebugEnterSubRule(1);
    		while (true)
    		{
    			int alt1=2;
    			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    			int LA1_1 = input.LA(1);

    			if (((LA1_1>='0' && LA1_1<='9')))
    			{
    				alt1 = 1;
    			}


    			} finally { DebugExitDecision(1); }
    			switch (alt1)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// Expression.g:
    				{
    				DebugLocation(40, 6);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt1 >= 1)
    					goto loop1;

    				EarlyExitException eee1 = new EarlyExitException( 1, input );
    				DebugRecognitionException(eee1);
    				throw eee1;
    			}
    			cnt1++;
    		}
    		loop1:
    			;

    		} finally { DebugExitSubRule(1); }

    		DebugLocation(40, 18);
    		// Expression.g:40:18: ( '.' ( '0' .. '9' )+ )?
    		int alt3=2;
    		try { DebugEnterSubRule(3);
    		try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    		int LA3_1 = input.LA(1);

    		if ((LA3_1=='.'))
    		{
    			alt3 = 1;
    		}
    		} finally { DebugExitDecision(3); }
    		switch (alt3)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// Expression.g:40:19: '.' ( '0' .. '9' )+
    			{
    			DebugLocation(40, 19);
    			Match('.'); 
    			DebugLocation(40, 23);
    			// Expression.g:40:23: ( '0' .. '9' )+
    			int cnt2=0;
    			try { DebugEnterSubRule(2);
    			while (true)
    			{
    				int alt2=2;
    				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    				int LA2_1 = input.LA(1);

    				if (((LA2_1>='0' && LA2_1<='9')))
    				{
    					alt2 = 1;
    				}


    				} finally { DebugExitDecision(2); }
    				switch (alt2)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// Expression.g:
    					{
    					DebugLocation(40, 23);
    					input.Consume();


    					}
    					break;

    				default:
    					if (cnt2 >= 1)
    						goto loop2;

    					EarlyExitException eee2 = new EarlyExitException( 2, input );
    					DebugRecognitionException(eee2);
    					throw eee2;
    				}
    				cnt2++;
    			}
    			loop2:
    				;

    			} finally { DebugExitSubRule(2); }


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(3); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("Number", 7);
    		LeaveRule("Number", 7);
    		LeaveRule_Number();
        }
    }
    // $ANTLR end "Number"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_Space() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_Space() {}

    // $ANTLR start "Space"
    [GrammarRule("Space")]
    private void mSpace()
    {
    	EnterRule_Space();
    	EnterRule("Space", 8);
    	TraceIn("Space", 8);
    		try
    		{
    		int _type = Space;
    		int _channel = DefaultTokenChannel;
    		// Expression.g:44:3: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
    		DebugEnterAlt(1);
    		// Expression.g:44:6: ( ' ' | '\\t' | '\\r' | '\\n' )
    		{
    		DebugLocation(44, 6);
    		if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(44, 32);
    		Skip();

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("Space", 8);
    		LeaveRule("Space", 8);
    		LeaveRule_Space();
        }
    }
    // $ANTLR end "Space"

    public override void mTokens()
    {
    	// Expression.g:1:8: ( T__6 | T__7 | T__8 | T__9 | T__10 | T__11 | Number | Space )
    	int alt4=8;
    	try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    	switch (input.LA(1))
    	{
    	case '(':
    		{
    		alt4 = 1;
    		}
    		break;
    	case ')':
    		{
    		alt4 = 2;
    		}
    		break;
    	case '*':
    		{
    		alt4 = 3;
    		}
    		break;
    	case '+':
    		{
    		alt4 = 4;
    		}
    		break;
    	case '-':
    		{
    		alt4 = 5;
    		}
    		break;
    	case '/':
    		{
    		alt4 = 6;
    		}
    		break;
    	case '0':
    	case '1':
    	case '2':
    	case '3':
    	case '4':
    	case '5':
    	case '6':
    	case '7':
    	case '8':
    	case '9':
    		{
    		alt4 = 7;
    		}
    		break;
    	case '\t':
    	case '\n':
    	case '\r':
    	case ' ':
    		{
    		alt4 = 8;
    		}
    		break;
    	default:
    		{
    			NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    	}

    	} finally { DebugExitDecision(4); }
    	switch (alt4)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// Expression.g:1:10: T__6
    		{
    		DebugLocation(1, 10);
    		mT__6(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// Expression.g:1:15: T__7
    		{
    		DebugLocation(1, 15);
    		mT__7(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// Expression.g:1:20: T__8
    		{
    		DebugLocation(1, 20);
    		mT__8(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// Expression.g:1:25: T__9
    		{
    		DebugLocation(1, 25);
    		mT__9(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// Expression.g:1:30: T__10
    		{
    		DebugLocation(1, 30);
    		mT__10(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// Expression.g:1:36: T__11
    		{
    		DebugLocation(1, 36);
    		mT__11(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// Expression.g:1:42: Number
    		{
    		DebugLocation(1, 42);
    		mNumber(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// Expression.g:1:49: Space
    		{
    		DebugLocation(1, 49);
    		mSpace(); 

    		}
    		break;

    	}

    }


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}
