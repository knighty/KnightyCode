//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 KnightyCode.g 2012-04-30 23:05:36

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  KnightyCode 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class KnightyCodeLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int Number=4;
	public const int Print=5;
	public const int ROOT=6;
	public const int Space=7;
	public const int UNARY_MIN=8;
	public const int T__9=9;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;

    // delegates
    // delegators

	public KnightyCodeLexer()
	{
		OnCreated();
	}

	public KnightyCodeLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public KnightyCodeLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "KnightyCode.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_T__9();
	partial void LeaveRule_T__9();

	// $ANTLR start "T__9"
	[GrammarRule("T__9")]
	private void mT__9()
	{
		EnterRule_T__9();
		EnterRule("T__9", 1);
		TraceIn("T__9", 1);
		try
		{
			int _type = T__9;
			int _channel = DefaultTokenChannel;
			// KnightyCode.g:9:6: ( '(' )
			DebugEnterAlt(1);
			// KnightyCode.g:9:8: '('
			{
			DebugLocation(9, 8);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__9", 1);
			LeaveRule("T__9", 1);
			LeaveRule_T__9();
		}
	}
	// $ANTLR end "T__9"

	partial void EnterRule_T__10();
	partial void LeaveRule_T__10();

	// $ANTLR start "T__10"
	[GrammarRule("T__10")]
	private void mT__10()
	{
		EnterRule_T__10();
		EnterRule("T__10", 2);
		TraceIn("T__10", 2);
		try
		{
			int _type = T__10;
			int _channel = DefaultTokenChannel;
			// KnightyCode.g:10:7: ( ')' )
			DebugEnterAlt(1);
			// KnightyCode.g:10:9: ')'
			{
			DebugLocation(10, 9);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__10", 2);
			LeaveRule("T__10", 2);
			LeaveRule_T__10();
		}
	}
	// $ANTLR end "T__10"

	partial void EnterRule_T__11();
	partial void LeaveRule_T__11();

	// $ANTLR start "T__11"
	[GrammarRule("T__11")]
	private void mT__11()
	{
		EnterRule_T__11();
		EnterRule("T__11", 3);
		TraceIn("T__11", 3);
		try
		{
			int _type = T__11;
			int _channel = DefaultTokenChannel;
			// KnightyCode.g:11:7: ( '*' )
			DebugEnterAlt(1);
			// KnightyCode.g:11:9: '*'
			{
			DebugLocation(11, 9);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__11", 3);
			LeaveRule("T__11", 3);
			LeaveRule_T__11();
		}
	}
	// $ANTLR end "T__11"

	partial void EnterRule_T__12();
	partial void LeaveRule_T__12();

	// $ANTLR start "T__12"
	[GrammarRule("T__12")]
	private void mT__12()
	{
		EnterRule_T__12();
		EnterRule("T__12", 4);
		TraceIn("T__12", 4);
		try
		{
			int _type = T__12;
			int _channel = DefaultTokenChannel;
			// KnightyCode.g:12:7: ( '+' )
			DebugEnterAlt(1);
			// KnightyCode.g:12:9: '+'
			{
			DebugLocation(12, 9);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__12", 4);
			LeaveRule("T__12", 4);
			LeaveRule_T__12();
		}
	}
	// $ANTLR end "T__12"

	partial void EnterRule_T__13();
	partial void LeaveRule_T__13();

	// $ANTLR start "T__13"
	[GrammarRule("T__13")]
	private void mT__13()
	{
		EnterRule_T__13();
		EnterRule("T__13", 5);
		TraceIn("T__13", 5);
		try
		{
			int _type = T__13;
			int _channel = DefaultTokenChannel;
			// KnightyCode.g:13:7: ( '-' )
			DebugEnterAlt(1);
			// KnightyCode.g:13:9: '-'
			{
			DebugLocation(13, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__13", 5);
			LeaveRule("T__13", 5);
			LeaveRule_T__13();
		}
	}
	// $ANTLR end "T__13"

	partial void EnterRule_T__14();
	partial void LeaveRule_T__14();

	// $ANTLR start "T__14"
	[GrammarRule("T__14")]
	private void mT__14()
	{
		EnterRule_T__14();
		EnterRule("T__14", 6);
		TraceIn("T__14", 6);
		try
		{
			int _type = T__14;
			int _channel = DefaultTokenChannel;
			// KnightyCode.g:14:7: ( '/' )
			DebugEnterAlt(1);
			// KnightyCode.g:14:9: '/'
			{
			DebugLocation(14, 9);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__14", 6);
			LeaveRule("T__14", 6);
			LeaveRule_T__14();
		}
	}
	// $ANTLR end "T__14"

	partial void EnterRule_Number();
	partial void LeaveRule_Number();

	// $ANTLR start "Number"
	[GrammarRule("Number")]
	private void mNumber()
	{
		EnterRule_Number();
		EnterRule("Number", 7);
		TraceIn("Number", 7);
		try
		{
			int _type = Number;
			int _channel = DefaultTokenChannel;
			// KnightyCode.g:79:3: ( ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )? )
			DebugEnterAlt(1);
			// KnightyCode.g:79:6: ( '0' .. '9' )+ ( '.' ( '0' .. '9' )+ )?
			{
			DebugLocation(79, 6);
			// KnightyCode.g:79:6: ( '0' .. '9' )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='0' && LA1_1<='9')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// KnightyCode.g:
					{
					DebugLocation(79, 6);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(79, 18);
			// KnightyCode.g:79:18: ( '.' ( '0' .. '9' )+ )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1=='.'))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// KnightyCode.g:79:19: '.' ( '0' .. '9' )+
				{
				DebugLocation(79, 19);
				Match('.'); 
				DebugLocation(79, 23);
				// KnightyCode.g:79:23: ( '0' .. '9' )+
				int cnt2=0;
				try { DebugEnterSubRule(2);
				while (true)
				{
					int alt2=2;
					try { DebugEnterDecision(2, false);
					int LA2_1 = input.LA(1);

					if (((LA2_1>='0' && LA2_1<='9')))
					{
						alt2 = 1;
					}


					} finally { DebugExitDecision(2); }
					switch (alt2)
					{
					case 1:
						DebugEnterAlt(1);
						// KnightyCode.g:
						{
						DebugLocation(79, 23);
						input.Consume();


						}
						break;

					default:
						if (cnt2 >= 1)
							goto loop2;

						EarlyExitException eee2 = new EarlyExitException( 2, input );
						DebugRecognitionException(eee2);
						throw eee2;
					}
					cnt2++;
				}
				loop2:
					;

				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Number", 7);
			LeaveRule("Number", 7);
			LeaveRule_Number();
		}
	}
	// $ANTLR end "Number"

	partial void EnterRule_Space();
	partial void LeaveRule_Space();

	// $ANTLR start "Space"
	[GrammarRule("Space")]
	private void mSpace()
	{
		EnterRule_Space();
		EnterRule("Space", 8);
		TraceIn("Space", 8);
		try
		{
			int _type = Space;
			int _channel = DefaultTokenChannel;
			// KnightyCode.g:83:3: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// KnightyCode.g:83:6: ( ' ' | '\\t' | '\\r' | '\\n' )
			{
			DebugLocation(83, 6);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(83, 32);
			Skip();

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Space", 8);
			LeaveRule("Space", 8);
			LeaveRule_Space();
		}
	}
	// $ANTLR end "Space"

	partial void EnterRule_Print();
	partial void LeaveRule_Print();

	// $ANTLR start "Print"
	[GrammarRule("Print")]
	private void mPrint()
	{
		EnterRule_Print();
		EnterRule("Print", 9);
		TraceIn("Print", 9);
		try
		{
			int _type = Print;
			int _channel = DefaultTokenChannel;
			// KnightyCode.g:87:3: ( ( 'print' ) )
			DebugEnterAlt(1);
			// KnightyCode.g:87:3: ( 'print' )
			{
			DebugLocation(87, 3);
			// KnightyCode.g:87:3: ( 'print' )
			DebugEnterAlt(1);
			// KnightyCode.g:87:4: 'print'
			{
			DebugLocation(87, 4);
			Match("print"); 


			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Print", 9);
			LeaveRule("Print", 9);
			LeaveRule_Print();
		}
	}
	// $ANTLR end "Print"

	public override void mTokens()
	{
		// KnightyCode.g:1:8: ( T__9 | T__10 | T__11 | T__12 | T__13 | T__14 | Number | Space | Print )
		int alt4=9;
		try { DebugEnterDecision(4, false);
		switch (input.LA(1))
		{
		case '(':
			{
			alt4 = 1;
			}
			break;
		case ')':
			{
			alt4 = 2;
			}
			break;
		case '*':
			{
			alt4 = 3;
			}
			break;
		case '+':
			{
			alt4 = 4;
			}
			break;
		case '-':
			{
			alt4 = 5;
			}
			break;
		case '/':
			{
			alt4 = 6;
			}
			break;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			{
			alt4 = 7;
			}
			break;
		case '\t':
		case '\n':
		case '\r':
		case ' ':
			{
			alt4 = 8;
			}
			break;
		case 'p':
			{
			alt4 = 9;
			}
			break;
		default:
			{
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
		}

		} finally { DebugExitDecision(4); }
		switch (alt4)
		{
		case 1:
			DebugEnterAlt(1);
			// KnightyCode.g:1:10: T__9
			{
			DebugLocation(1, 10);
			mT__9(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// KnightyCode.g:1:15: T__10
			{
			DebugLocation(1, 15);
			mT__10(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// KnightyCode.g:1:21: T__11
			{
			DebugLocation(1, 21);
			mT__11(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// KnightyCode.g:1:27: T__12
			{
			DebugLocation(1, 27);
			mT__12(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// KnightyCode.g:1:33: T__13
			{
			DebugLocation(1, 33);
			mT__13(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// KnightyCode.g:1:39: T__14
			{
			DebugLocation(1, 39);
			mT__14(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// KnightyCode.g:1:45: Number
			{
			DebugLocation(1, 45);
			mNumber(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// KnightyCode.g:1:52: Space
			{
			DebugLocation(1, 52);
			mSpace(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// KnightyCode.g:1:58: Print
			{
			DebugLocation(1, 58);
			mPrint(); 

			}
			break;

		}

	}


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}

} // namespace  KnightyCode 
