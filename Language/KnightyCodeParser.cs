//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 KnightyCode.g 2012-04-30 20:57:50

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  KnightyCode 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class KnightyCodeParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Number", "Print", "ROOT", "Space", "UNARY_MIN", "'('", "')'", "'+'", "'-'"
	};
	public const int EOF=-1;
	public const int Number=4;
	public const int Print=5;
	public const int ROOT=6;
	public const int Space=7;
	public const int UNARY_MIN=8;
	public const int T__9=9;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;

	public KnightyCodeParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public KnightyCodeParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return KnightyCodeParser.tokenNames; } }
	public override string GrammarFileName { get { return "KnightyCode.g"; } }


		public static void Run( string code )
		{
			KnightyCodeLexer lex = new KnightyCodeLexer( new ANTLRStringStream( code ));
	        CommonTokenStream tokens = new CommonTokenStream(lex);
	 
	        KnightyCodeParser parser = new KnightyCodeParser(tokens);
	 
	        try {
	            parser.parse();
	        } catch (RecognitionException e)  {
	            Console.Error.WriteLine(e.StackTrace);
	        }
		}


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_parse();
	partial void LeaveRule_parse();
	// $ANTLR start "parse"
	// KnightyCode.g:36:1: parse : exp EOF -> ^( ROOT exp ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EOF2 = default(IToken);
		KnightyCodeParser.exp_return exp1 = default(KnightyCodeParser.exp_return);

		object EOF2_tree = default(object);
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_exp=new RewriteRuleSubtreeStream(adaptor,"rule exp");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(36, 2);
		try
		{
			// KnightyCode.g:37:3: ( exp EOF -> ^( ROOT exp ) )
			DebugEnterAlt(1);
			// KnightyCode.g:37:6: exp EOF
			{
			DebugLocation(37, 6);
			PushFollow(Follow._exp_in_parse82);
			exp1=exp();
			PopFollow();

			stream_exp.Add(exp1.Tree);
			DebugLocation(37, 10);
			EOF2=(IToken)Match(input,EOF,Follow._EOF_in_parse84);  
			stream_EOF.Add(EOF2);



			{
			// AST REWRITE
			// elements: exp
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 37:14: -> ^( ROOT exp )
			{
				DebugLocation(37, 17);
				// KnightyCode.g:37:17: ^( ROOT exp )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(37, 19);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(ROOT, "ROOT"), root_1);

				DebugLocation(37, 24);
				adaptor.AddChild(root_1, stream_exp.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
		}
		DebugLocation(38, 2);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"

	private sealed partial class exp_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public exp_return(KnightyCodeParser grammar) {OnCreated(grammar);}
		partial void OnCreated(KnightyCodeParser grammar);
	}

	partial void EnterRule_exp();
	partial void LeaveRule_exp();
	// $ANTLR start "exp"
	// KnightyCode.g:40:1: exp returns [Node node] : addExp ;
	[GrammarRule("exp")]
	private KnightyCodeParser.exp_return exp()
	{
		EnterRule_exp();
		EnterRule("exp", 2);
		TraceIn("exp", 2);
		KnightyCodeParser.exp_return retval = new KnightyCodeParser.exp_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		KnightyCodeParser.addExp_return addExp3 = default(KnightyCodeParser.addExp_return);

		try { DebugEnterRule(GrammarFileName, "exp");
		DebugLocation(40, 2);
		try
		{
			// KnightyCode.g:41:3: ( addExp )
			DebugEnterAlt(1);
			// KnightyCode.g:41:6: addExp
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(41, 6);
			PushFollow(Follow._addExp_in_exp110);
			addExp3=addExp();
			PopFollow();

			adaptor.AddChild(root_0, addExp3.Tree);
			DebugLocation(41, 13);
			 retval.node = (addExp3!=null?addExp3.node:default(Node)); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("exp", 2);
			LeaveRule("exp", 2);
			LeaveRule_exp();
		}
		DebugLocation(42, 2);
		} finally { DebugExitRule(GrammarFileName, "exp"); }
		return retval;

	}
	// $ANTLR end "exp"

	private sealed partial class addExp_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public addExp_return(KnightyCodeParser grammar) {OnCreated(grammar);}
		partial void OnCreated(KnightyCodeParser grammar);
	}

	partial void EnterRule_addExp();
	partial void LeaveRule_addExp();
	// $ANTLR start "addExp"
	// KnightyCode.g:44:1: addExp returns [Node node] : lhs= mulExp operator= ( '+' | '-' ) rhs= mulExp ;
	[GrammarRule("addExp")]
	private KnightyCodeParser.addExp_return addExp()
	{
		EnterRule_addExp();
		EnterRule("addExp", 3);
		TraceIn("addExp", 3);
		KnightyCodeParser.addExp_return retval = new KnightyCodeParser.addExp_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken operator = default(IToken);
		KnightyCodeParser.mulExp_return lhs = default(KnightyCodeParser.mulExp_return);
		KnightyCodeParser.mulExp_return rhs = default(KnightyCodeParser.mulExp_return);

		object operator_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "addExp");
		DebugLocation(44, 2);
		try
		{
			// KnightyCode.g:45:3: (lhs= mulExp operator= ( '+' | '-' ) rhs= mulExp )
			DebugEnterAlt(1);
			// KnightyCode.g:45:6: lhs= mulExp operator= ( '+' | '-' ) rhs= mulExp
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(45, 9);
			PushFollow(Follow._mulExp_in_addExp132);
			lhs=mulExp();
			PopFollow();

			adaptor.AddChild(root_0, lhs.Tree);
			DebugLocation(45, 25);

			operator=(IToken)input.LT(1);
			if ((input.LA(1)>=11 && input.LA(1)<=12))
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(operator));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(45, 41);
			PushFollow(Follow._mulExp_in_addExp146);
			rhs=mulExp();
			PopFollow();

			adaptor.AddChild(root_0, rhs.Tree);
			DebugLocation(45, 49);
			 retval.node = new CalcNode( (operator!=null?operator.Text:null), (lhs!=null?lhs.node:default(Node)), (rhs!=null?rhs.node:default(Node)) );  

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("addExp", 3);
			LeaveRule("addExp", 3);
			LeaveRule_addExp();
		}
		DebugLocation(46, 2);
		} finally { DebugExitRule(GrammarFileName, "addExp"); }
		return retval;

	}
	// $ANTLR end "addExp"

	private sealed partial class mulExp_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public mulExp_return(KnightyCodeParser grammar) {OnCreated(grammar);}
		partial void OnCreated(KnightyCodeParser grammar);
	}

	partial void EnterRule_mulExp();
	partial void LeaveRule_mulExp();
	// $ANTLR start "mulExp"
	// KnightyCode.g:48:1: mulExp returns [Node node] : lhs= unaryExp operator= ( '+' | '-' ) rhs= unaryExp ;
	[GrammarRule("mulExp")]
	private KnightyCodeParser.mulExp_return mulExp()
	{
		EnterRule_mulExp();
		EnterRule("mulExp", 4);
		TraceIn("mulExp", 4);
		KnightyCodeParser.mulExp_return retval = new KnightyCodeParser.mulExp_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken operator = default(IToken);
		AstParserRuleReturnScope<object, IToken> lhs = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> rhs = default(AstParserRuleReturnScope<object, IToken>);

		object operator_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "mulExp");
		DebugLocation(48, 2);
		try
		{
			// KnightyCode.g:49:3: (lhs= unaryExp operator= ( '+' | '-' ) rhs= unaryExp )
			DebugEnterAlt(1);
			// KnightyCode.g:49:6: lhs= unaryExp operator= ( '+' | '-' ) rhs= unaryExp
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(49, 9);
			PushFollow(Follow._unaryExp_in_mulExp168);
			lhs=unaryExp();
			PopFollow();

			adaptor.AddChild(root_0, lhs.Tree);
			DebugLocation(49, 27);

			operator=(IToken)input.LT(1);
			if ((input.LA(1)>=11 && input.LA(1)<=12))
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(operator));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(49, 43);
			PushFollow(Follow._unaryExp_in_mulExp182);
			rhs=unaryExp();
			PopFollow();

			adaptor.AddChild(root_0, rhs.Tree);
			DebugLocation(49, 53);
			 retval.node = new CalcNode( (operator!=null?operator.Text:null), (lhs!=null?input.ToString(lhs.Start,lhs.Stop):null), (rhs!=null?input.ToString(rhs.Start,rhs.Stop):null) );  

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mulExp", 4);
			LeaveRule("mulExp", 4);
			LeaveRule_mulExp();
		}
		DebugLocation(50, 2);
		} finally { DebugExitRule(GrammarFileName, "mulExp"); }
		return retval;

	}
	// $ANTLR end "mulExp"

	partial void EnterRule_unaryExp();
	partial void LeaveRule_unaryExp();
	// $ANTLR start "unaryExp"
	// KnightyCode.g:52:1: unaryExp : ( '-' literal -> ^( UNARY_MIN literal ) | literal );
	[GrammarRule("unaryExp")]
	private AstParserRuleReturnScope<object, IToken> unaryExp()
	{
		EnterRule_unaryExp();
		EnterRule("unaryExp", 5);
		TraceIn("unaryExp", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal4 = default(IToken);
		KnightyCodeParser.literal_return literal5 = default(KnightyCodeParser.literal_return);
		KnightyCodeParser.literal_return literal6 = default(KnightyCodeParser.literal_return);

		object char_literal4_tree = default(object);
		RewriteRuleITokenStream stream_12=new RewriteRuleITokenStream(adaptor,"token 12");
		RewriteRuleSubtreeStream stream_literal=new RewriteRuleSubtreeStream(adaptor,"rule literal");
		try { DebugEnterRule(GrammarFileName, "unaryExp");
		DebugLocation(52, 2);
		try
		{
			// KnightyCode.g:53:3: ( '-' literal -> ^( UNARY_MIN literal ) | literal )
			int alt1=2;
			try { DebugEnterDecision(1, false);
			int LA1_1 = input.LA(1);

			if ((LA1_1==12))
			{
				alt1 = 1;
			}
			else if ((LA1_1==Number||LA1_1==9))
			{
				alt1 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// KnightyCode.g:53:6: '-' literal
				{
				DebugLocation(53, 6);
				char_literal4=(IToken)Match(input,12,Follow._12_in_unaryExp198);  
				stream_12.Add(char_literal4);

				DebugLocation(53, 10);
				PushFollow(Follow._literal_in_unaryExp200);
				literal5=literal();
				PopFollow();

				stream_literal.Add(literal5.Tree);


				{
				// AST REWRITE
				// elements: literal
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 53:18: -> ^( UNARY_MIN literal )
				{
					DebugLocation(53, 21);
					// KnightyCode.g:53:21: ^( UNARY_MIN literal )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(53, 23);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(UNARY_MIN, "UNARY_MIN"), root_1);

					DebugLocation(53, 33);
					adaptor.AddChild(root_1, stream_literal.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// KnightyCode.g:54:6: literal
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(54, 6);
				PushFollow(Follow._literal_in_unaryExp215);
				literal6=literal();
				PopFollow();

				adaptor.AddChild(root_0, literal6.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryExp", 5);
			LeaveRule("unaryExp", 5);
			LeaveRule_unaryExp();
		}
		DebugLocation(55, 2);
		} finally { DebugExitRule(GrammarFileName, "unaryExp"); }
		return retval;

	}
	// $ANTLR end "unaryExp"

	private sealed partial class printExp_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public printExp_return(KnightyCodeParser grammar) {OnCreated(grammar);}
		partial void OnCreated(KnightyCodeParser grammar);
	}

	partial void EnterRule_printExp();
	partial void LeaveRule_printExp();
	// $ANTLR start "printExp"
	// KnightyCode.g:57:1: printExp returns [Node node] : Print number ;
	[GrammarRule("printExp")]
	private KnightyCodeParser.printExp_return printExp()
	{
		EnterRule_printExp();
		EnterRule("printExp", 6);
		TraceIn("printExp", 6);
		KnightyCodeParser.printExp_return retval = new KnightyCodeParser.printExp_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken Print7 = default(IToken);
		KnightyCodeParser.number_return number8 = default(KnightyCodeParser.number_return);

		object Print7_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "printExp");
		DebugLocation(57, 1);
		try
		{
			// KnightyCode.g:58:2: ( Print number )
			DebugEnterAlt(1);
			// KnightyCode.g:58:4: Print number
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(58, 4);
			Print7=(IToken)Match(input,Print,Follow._Print_in_printExp231); 
			Print7_tree = (object)adaptor.Create(Print7);
			adaptor.AddChild(root_0, Print7_tree);
			DebugLocation(58, 10);
			PushFollow(Follow._number_in_printExp233);
			number8=number();
			PopFollow();

			adaptor.AddChild(root_0, number8.Tree);
			DebugLocation(58, 17);
			 new PrintNode( (number8!=null?number8.node:default(Node)) ); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("printExp", 6);
			LeaveRule("printExp", 6);
			LeaveRule_printExp();
		}
		DebugLocation(59, 1);
		} finally { DebugExitRule(GrammarFileName, "printExp"); }
		return retval;

	}
	// $ANTLR end "printExp"

	private sealed partial class literal_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public literal_return(KnightyCodeParser grammar) {OnCreated(grammar);}
		partial void OnCreated(KnightyCodeParser grammar);
	}

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// KnightyCode.g:61:1: literal returns [Node node] : ( number | '(' exp ')' -> exp );
	[GrammarRule("literal")]
	private KnightyCodeParser.literal_return literal()
	{
		EnterRule_literal();
		EnterRule("literal", 7);
		TraceIn("literal", 7);
		KnightyCodeParser.literal_return retval = new KnightyCodeParser.literal_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal10 = default(IToken);
		IToken char_literal12 = default(IToken);
		KnightyCodeParser.number_return number9 = default(KnightyCodeParser.number_return);
		KnightyCodeParser.exp_return exp11 = default(KnightyCodeParser.exp_return);

		object char_literal10_tree = default(object);
		object char_literal12_tree = default(object);
		RewriteRuleITokenStream stream_9=new RewriteRuleITokenStream(adaptor,"token 9");
		RewriteRuleITokenStream stream_10=new RewriteRuleITokenStream(adaptor,"token 10");
		RewriteRuleSubtreeStream stream_exp=new RewriteRuleSubtreeStream(adaptor,"rule exp");
		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(61, 2);
		try
		{
			// KnightyCode.g:62:3: ( number | '(' exp ')' -> exp )
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if ((LA2_1==Number))
			{
				alt2 = 1;
			}
			else if ((LA2_1==9))
			{
				alt2 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// KnightyCode.g:62:6: number
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(62, 6);
				PushFollow(Follow._number_in_literal252);
				number9=number();
				PopFollow();

				adaptor.AddChild(root_0, number9.Tree);
				DebugLocation(62, 13);
				 retval.node = (number9!=null?number9.node:default(Node)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// KnightyCode.g:63:6: '(' exp ')'
				{
				DebugLocation(63, 6);
				char_literal10=(IToken)Match(input,9,Follow._9_in_literal261);  
				stream_9.Add(char_literal10);

				DebugLocation(63, 10);
				PushFollow(Follow._exp_in_literal263);
				exp11=exp();
				PopFollow();

				stream_exp.Add(exp11.Tree);
				DebugLocation(63, 14);
				char_literal12=(IToken)Match(input,10,Follow._10_in_literal265);  
				stream_10.Add(char_literal12);



				{
				// AST REWRITE
				// elements: exp
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 63:18: -> exp
				{
					DebugLocation(63, 21);
					adaptor.AddChild(root_0, stream_exp.NextTree());
					DebugLocation(63, 25);
					adaptor.AddChild(root_0,  retval.node = (exp11!=null?exp11.node:default(Node)); );

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("literal", 7);
			LeaveRule("literal", 7);
			LeaveRule_literal();
		}
		DebugLocation(64, 2);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return retval;

	}
	// $ANTLR end "literal"

	private sealed partial class number_return : AstParserRuleReturnScope<object, IToken>
	{
		public Node node;
		public number_return(KnightyCodeParser grammar) {OnCreated(grammar);}
		partial void OnCreated(KnightyCodeParser grammar);
	}

	partial void EnterRule_number();
	partial void LeaveRule_number();
	// $ANTLR start "number"
	// KnightyCode.g:66:1: number returns [Node node] : Number ;
	[GrammarRule("number")]
	private KnightyCodeParser.number_return number()
	{
		EnterRule_number();
		EnterRule("number", 8);
		TraceIn("number", 8);
		KnightyCodeParser.number_return retval = new KnightyCodeParser.number_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken Number13 = default(IToken);

		object Number13_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "number");
		DebugLocation(66, 1);
		try
		{
			// KnightyCode.g:67:2: ( Number )
			DebugEnterAlt(1);
			// KnightyCode.g:67:4: Number
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(67, 4);
			Number13=(IToken)Match(input,Number,Follow._Number_in_number287); 
			Number13_tree = (object)adaptor.Create(Number13);
			adaptor.AddChild(root_0, Number13_tree);
			DebugLocation(68, 2);
			 retval.node = new NumberNode( (Number13!=null?Number13.Text:null) ); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("number", 8);
			LeaveRule("number", 8);
			LeaveRule_number();
		}
		DebugLocation(69, 1);
		} finally { DebugExitRule(GrammarFileName, "number"); }
		return retval;

	}
	// $ANTLR end "number"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _exp_in_parse82 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse84 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addExp_in_exp110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mulExp_in_addExp132 = new BitSet(new ulong[]{0x1800UL});
		public static readonly BitSet _set_in_addExp136 = new BitSet(new ulong[]{0x1210UL});
		public static readonly BitSet _mulExp_in_addExp146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExp_in_mulExp168 = new BitSet(new ulong[]{0x1800UL});
		public static readonly BitSet _set_in_mulExp172 = new BitSet(new ulong[]{0x1210UL});
		public static readonly BitSet _unaryExp_in_mulExp182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _12_in_unaryExp198 = new BitSet(new ulong[]{0x210UL});
		public static readonly BitSet _literal_in_unaryExp200 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_unaryExp215 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Print_in_printExp231 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _number_in_printExp233 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _number_in_literal252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _9_in_literal261 = new BitSet(new ulong[]{0x1210UL});
		public static readonly BitSet _exp_in_literal263 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _10_in_literal265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Number_in_number287 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  KnightyCode 
