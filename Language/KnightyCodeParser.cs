//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 KnightyCode.g 2012-05-01 13:49:51

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  KnightyCode 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class KnightyCodeParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Else", "If", "Number", "Print", "ROOT", "Space", "UNARY_MIN", "While", "'('", "')'", "'*'", "'+'", "'-'", "'/'", "';'", "'{'", "'}'"
	};
	public const int EOF=-1;
	public const int Else=4;
	public const int If=5;
	public const int Number=6;
	public const int Print=7;
	public const int ROOT=8;
	public const int Space=9;
	public const int UNARY_MIN=10;
	public const int While=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;

	public KnightyCodeParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public KnightyCodeParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return KnightyCodeParser.tokenNames; } }
	public override string GrammarFileName { get { return "KnightyCode.g"; } }


		public void Run( string code, Context context )
		{
	        try {
	            parse().Evaluate( context );
	        } catch (RecognitionException e)  {
	            Console.Error.WriteLine(e.StackTrace);
	        }
		}


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_parse();
	partial void LeaveRule_parse();
	// $ANTLR start "parse"
	// KnightyCode.g:31:1: parse returns [Node node] : exp EOF ;
	[GrammarRule("parse")]
	private Node parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
		Node node = default(Node);


		Node exp1 = default(Node);

		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(31, 2);
		try
		{
			// KnightyCode.g:32:3: ( exp EOF )
			DebugEnterAlt(1);
			// KnightyCode.g:32:6: exp EOF
			{
			DebugLocation(32, 6);
			PushFollow(Follow._exp_in_parse84);
			exp1=exp();
			PopFollow();
			if (state.failed) return node;
			DebugLocation(32, 10);
			Match(input,EOF,Follow._EOF_in_parse86); if (state.failed) return node;
			DebugLocation(32, 14);
			if (state.backtracking == 0)
			{
				 node = exp1; 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
		}
		DebugLocation(33, 2);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return node;

	}
	// $ANTLR end "parse"

	partial void EnterRule_exp();
	partial void LeaveRule_exp();
	// $ANTLR start "exp"
	// KnightyCode.g:35:1: exp returns [Node node] : ( printExp |a= printExp ';' ( Space )? (b= printExp ';' )* );
	[GrammarRule("exp")]
	private Node exp()
	{
		EnterRule_exp();
		EnterRule("exp", 2);
		TraceIn("exp", 2);
		Node node = default(Node);


		Node a = default(Node);
		Node b = default(Node);
		Node printExp2 = default(Node);

		try { DebugEnterRule(GrammarFileName, "exp");
		DebugLocation(35, 2);
		try
		{
			// KnightyCode.g:36:3: ( printExp |a= printExp ';' ( Space )? (b= printExp ';' )* )
			int alt3=2;
			try { DebugEnterDecision(3, false);
			switch (input.LA(1))
			{
			case Print:
				{
				int LA3_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_KnightyCode_fragment)))
				{
					alt3 = 1;
				}
				else if ((true))
				{
					alt3 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 3, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case Number:
				{
				int LA3_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_KnightyCode_fragment)))
				{
					alt3 = 1;
				}
				else if ((true))
				{
					alt3 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 3, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case If:
				{
				int LA3_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_KnightyCode_fragment)))
				{
					alt3 = 1;
				}
				else if ((true))
				{
					alt3 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 3, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case While:
				{
				int LA3_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_KnightyCode_fragment)))
				{
					alt3 = 1;
				}
				else if ((true))
				{
					alt3 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 3, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 12:
				{
				int LA3_2 = input.LA(2);

				if ((EvaluatePredicate(synpred1_KnightyCode_fragment)))
				{
					alt3 = 1;
				}
				else if ((true))
				{
					alt3 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 3, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// KnightyCode.g:37:3: printExp
				{
				DebugLocation(37, 3);
				PushFollow(Follow._printExp_in_exp110);
				printExp2=printExp();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(37, 12);
				if (state.backtracking == 0)
				{
					 node = printExp2; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// KnightyCode.g:38:5: a= printExp ';' ( Space )? (b= printExp ';' )*
				{
				DebugLocation(38, 5);
				if (state.backtracking == 0)
				{
					 node = new CodeBodyNode( ); 
				}
				DebugLocation(39, 3);
				PushFollow(Follow._printExp_in_exp123);
				a=printExp();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(39, 13);
				if (state.backtracking == 0)
				{
					 ( node as CodeBodyNode ).Nodes.Add( a ); 
				}
				DebugLocation(39, 65);
				Match(input,18,Follow._18_in_exp127); if (state.failed) return node;
				DebugLocation(39, 69);
				// KnightyCode.g:39:69: ( Space )?
				int alt1=2;
				try { DebugEnterSubRule(1);
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1==Space))
				{
					alt1 = 1;
				}
				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// KnightyCode.g:39:69: Space
					{
					DebugLocation(39, 69);
					Match(input,Space,Follow._Space_in_exp129); if (state.failed) return node;

					}
					break;

				}
				} finally { DebugExitSubRule(1); }

				DebugLocation(40, 3);
				// KnightyCode.g:40:3: (b= printExp ';' )*
				try { DebugEnterSubRule(2);
				while (true)
				{
					int alt2=2;
					try { DebugEnterDecision(2, false);
					int LA2_1 = input.LA(1);

					if (((LA2_1>=If && LA2_1<=Print)||(LA2_1>=While && LA2_1<=12)))
					{
						alt2 = 1;
					}


					} finally { DebugExitDecision(2); }
					switch ( alt2 )
					{
					case 1:
						DebugEnterAlt(1);
						// KnightyCode.g:40:5: b= printExp ';'
						{
						DebugLocation(40, 6);
						PushFollow(Follow._printExp_in_exp138);
						b=printExp();
						PopFollow();
						if (state.failed) return node;
						DebugLocation(40, 16);
						if (state.backtracking == 0)
						{
							 ( node as CodeBodyNode ).Nodes.Add( b ); 
						}
						DebugLocation(40, 68);
						Match(input,18,Follow._18_in_exp142); if (state.failed) return node;

						}
						break;

					default:
						goto loop2;
					}
				}

				loop2:
					;

				} finally { DebugExitSubRule(2); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("exp", 2);
			LeaveRule("exp", 2);
			LeaveRule_exp();
		}
		DebugLocation(41, 2);
		} finally { DebugExitRule(GrammarFileName, "exp"); }
		return node;

	}
	// $ANTLR end "exp"

	partial void EnterRule_printExp();
	partial void LeaveRule_printExp();
	// $ANTLR start "printExp"
	// KnightyCode.g:43:1: printExp returns [Node node] : ( Print Space addExp | addExp );
	[GrammarRule("printExp")]
	private Node printExp()
	{
		EnterRule_printExp();
		EnterRule("printExp", 3);
		TraceIn("printExp", 3);
		Node node = default(Node);


		Node addExp3 = default(Node);
		Node addExp4 = default(Node);

		try { DebugEnterRule(GrammarFileName, "printExp");
		DebugLocation(43, 1);
		try
		{
			// KnightyCode.g:44:2: ( Print Space addExp | addExp )
			int alt4=2;
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==Print))
			{
				alt4 = 1;
			}
			else if (((LA4_1>=If && LA4_1<=Number)||(LA4_1>=While && LA4_1<=12)))
			{
				alt4 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return node;}
				NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// KnightyCode.g:44:4: Print Space addExp
				{
				DebugLocation(44, 4);
				Match(input,Print,Follow._Print_in_printExp162); if (state.failed) return node;
				DebugLocation(44, 10);
				Match(input,Space,Follow._Space_in_printExp164); if (state.failed) return node;
				DebugLocation(44, 16);
				PushFollow(Follow._addExp_in_printExp166);
				addExp3=addExp();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(44, 23);
				if (state.backtracking == 0)
				{
					 node = new PrintNode( addExp3 ); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// KnightyCode.g:45:4: addExp
				{
				DebugLocation(45, 4);
				PushFollow(Follow._addExp_in_printExp173);
				addExp4=addExp();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(45, 11);
				if (state.backtracking == 0)
				{
					 node = addExp4; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("printExp", 3);
			LeaveRule("printExp", 3);
			LeaveRule_printExp();
		}
		DebugLocation(46, 1);
		} finally { DebugExitRule(GrammarFileName, "printExp"); }
		return node;

	}
	// $ANTLR end "printExp"

	partial void EnterRule_addExp();
	partial void LeaveRule_addExp();
	// $ANTLR start "addExp"
	// KnightyCode.g:48:1: addExp returns [Node node] : (lhs= mulExp op= ( '+' | '-' ) rhs= addExp | mulExp );
	[GrammarRule("addExp")]
	private Node addExp()
	{
		EnterRule_addExp();
		EnterRule("addExp", 4);
		TraceIn("addExp", 4);
		Node node = default(Node);


		IToken op = default(IToken);
		Node lhs = default(Node);
		Node rhs = default(Node);
		Node mulExp5 = default(Node);

		try { DebugEnterRule(GrammarFileName, "addExp");
		DebugLocation(48, 2);
		try
		{
			// KnightyCode.g:49:3: (lhs= mulExp op= ( '+' | '-' ) rhs= addExp | mulExp )
			int alt5=2;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case Number:
				{
				int LA5_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_KnightyCode_fragment)))
				{
					alt5 = 1;
				}
				else if ((true))
				{
					alt5 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 5, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case If:
				{
				int LA5_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_KnightyCode_fragment)))
				{
					alt5 = 1;
				}
				else if ((true))
				{
					alt5 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 5, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case While:
				{
				int LA5_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_KnightyCode_fragment)))
				{
					alt5 = 1;
				}
				else if ((true))
				{
					alt5 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 5, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 12:
				{
				int LA5_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_KnightyCode_fragment)))
				{
					alt5 = 1;
				}
				else if ((true))
				{
					alt5 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 5, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// KnightyCode.g:49:6: lhs= mulExp op= ( '+' | '-' ) rhs= addExp
				{
				DebugLocation(49, 9);
				PushFollow(Follow._mulExp_in_addExp194);
				lhs=mulExp();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(49, 19);

				op=(IToken)input.LT(1);
				if ((input.LA(1)>=15 && input.LA(1)<=16))
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(49, 35);
				PushFollow(Follow._addExp_in_addExp208);
				rhs=addExp();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(49, 43);
				if (state.backtracking == 0)
				{
					 node = new CalcNode( (op!=null?op.Text:null), lhs, rhs );  
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// KnightyCode.g:50:5: mulExp
				{
				DebugLocation(50, 5);
				PushFollow(Follow._mulExp_in_addExp216);
				mulExp5=mulExp();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(50, 12);
				if (state.backtracking == 0)
				{
					 node = mulExp5; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("addExp", 4);
			LeaveRule("addExp", 4);
			LeaveRule_addExp();
		}
		DebugLocation(51, 2);
		} finally { DebugExitRule(GrammarFileName, "addExp"); }
		return node;

	}
	// $ANTLR end "addExp"

	partial void EnterRule_mulExp();
	partial void LeaveRule_mulExp();
	// $ANTLR start "mulExp"
	// KnightyCode.g:53:1: mulExp returns [Node node] : (lhs= unaryExp op= ( '*' | '/' ) rhs= mulExp | unaryExp );
	[GrammarRule("mulExp")]
	private Node mulExp()
	{
		EnterRule_mulExp();
		EnterRule("mulExp", 5);
		TraceIn("mulExp", 5);
		Node node = default(Node);


		IToken op = default(IToken);
		Node lhs = default(Node);
		Node rhs = default(Node);
		Node unaryExp6 = default(Node);

		try { DebugEnterRule(GrammarFileName, "mulExp");
		DebugLocation(53, 2);
		try
		{
			// KnightyCode.g:54:3: (lhs= unaryExp op= ( '*' | '/' ) rhs= mulExp | unaryExp )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			switch (input.LA(1))
			{
			case Number:
				{
				int LA6_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_KnightyCode_fragment)))
				{
					alt6 = 1;
				}
				else if ((true))
				{
					alt6 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 6, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case If:
				{
				int LA6_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_KnightyCode_fragment)))
				{
					alt6 = 1;
				}
				else if ((true))
				{
					alt6 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 6, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case While:
				{
				int LA6_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_KnightyCode_fragment)))
				{
					alt6 = 1;
				}
				else if ((true))
				{
					alt6 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 6, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case 12:
				{
				int LA6_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_KnightyCode_fragment)))
				{
					alt6 = 1;
				}
				else if ((true))
				{
					alt6 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 6, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// KnightyCode.g:54:6: lhs= unaryExp op= ( '*' | '/' ) rhs= mulExp
				{
				DebugLocation(54, 9);
				PushFollow(Follow._unaryExp_in_mulExp238);
				lhs=unaryExp();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(54, 21);

				op=(IToken)input.LT(1);
				if (input.LA(1)==14||input.LA(1)==17)
				{
					input.Consume();
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(54, 37);
				PushFollow(Follow._mulExp_in_mulExp252);
				rhs=mulExp();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(54, 45);
				if (state.backtracking == 0)
				{
					 node = new CalcNode( (op!=null?op.Text:null), lhs, rhs );  
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// KnightyCode.g:55:5: unaryExp
				{
				DebugLocation(55, 5);
				PushFollow(Follow._unaryExp_in_mulExp260);
				unaryExp6=unaryExp();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(55, 14);
				if (state.backtracking == 0)
				{
					 node = unaryExp6; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("mulExp", 5);
			LeaveRule("mulExp", 5);
			LeaveRule_mulExp();
		}
		DebugLocation(56, 2);
		} finally { DebugExitRule(GrammarFileName, "mulExp"); }
		return node;

	}
	// $ANTLR end "mulExp"

	partial void EnterRule_unaryExp();
	partial void LeaveRule_unaryExp();
	// $ANTLR start "unaryExp"
	// KnightyCode.g:58:1: unaryExp returns [Node node] : literal ;
	[GrammarRule("unaryExp")]
	private Node unaryExp()
	{
		EnterRule_unaryExp();
		EnterRule("unaryExp", 6);
		TraceIn("unaryExp", 6);
		Node node = default(Node);


		Node literal7 = default(Node);

		try { DebugEnterRule(GrammarFileName, "unaryExp");
		DebugLocation(58, 2);
		try
		{
			// KnightyCode.g:59:3: ( literal )
			DebugEnterAlt(1);
			// KnightyCode.g:59:6: literal
			{
			DebugLocation(59, 6);
			PushFollow(Follow._literal_in_unaryExp280);
			literal7=literal();
			PopFollow();
			if (state.failed) return node;
			DebugLocation(59, 14);
			if (state.backtracking == 0)
			{
				 node = literal7; 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryExp", 6);
			LeaveRule("unaryExp", 6);
			LeaveRule_unaryExp();
		}
		DebugLocation(60, 2);
		} finally { DebugExitRule(GrammarFileName, "unaryExp"); }
		return node;

	}
	// $ANTLR end "unaryExp"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// KnightyCode.g:62:1: literal returns [Node node] : ( number | ifExp | whileExp | '(' exp ')' );
	[GrammarRule("literal")]
	private Node literal()
	{
		EnterRule_literal();
		EnterRule("literal", 7);
		TraceIn("literal", 7);
		Node node = default(Node);


		Node number8 = default(Node);
		IfNode ifExp9 = default(IfNode);
		WhileNode whileExp10 = default(WhileNode);
		Node exp11 = default(Node);

		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(62, 2);
		try
		{
			// KnightyCode.g:63:3: ( number | ifExp | whileExp | '(' exp ')' )
			int alt7=4;
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case Number:
				{
				alt7 = 1;
				}
				break;
			case If:
				{
				alt7 = 2;
				}
				break;
			case While:
				{
				alt7 = 3;
				}
				break;
			case 12:
				{
				alt7 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return node;}
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// KnightyCode.g:63:6: number
				{
				DebugLocation(63, 6);
				PushFollow(Follow._number_in_literal300);
				number8=number();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(63, 13);
				if (state.backtracking == 0)
				{
					 node = number8; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// KnightyCode.g:64:5: ifExp
				{
				DebugLocation(64, 5);
				PushFollow(Follow._ifExp_in_literal308);
				ifExp9=ifExp();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(64, 11);
				if (state.backtracking == 0)
				{
					 node = ifExp9; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// KnightyCode.g:65:5: whileExp
				{
				DebugLocation(65, 5);
				PushFollow(Follow._whileExp_in_literal316);
				whileExp10=whileExp();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(65, 14);
				if (state.backtracking == 0)
				{
					 node = whileExp10; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// KnightyCode.g:66:6: '(' exp ')'
				{
				DebugLocation(66, 6);
				Match(input,12,Follow._12_in_literal325); if (state.failed) return node;
				DebugLocation(66, 10);
				PushFollow(Follow._exp_in_literal327);
				exp11=exp();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(66, 14);
				Match(input,13,Follow._13_in_literal329); if (state.failed) return node;
				DebugLocation(66, 18);
				if (state.backtracking == 0)
				{
					 node = exp11; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("literal", 7);
			LeaveRule("literal", 7);
			LeaveRule_literal();
		}
		DebugLocation(67, 2);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return node;

	}
	// $ANTLR end "literal"

	partial void EnterRule_number();
	partial void LeaveRule_number();
	// $ANTLR start "number"
	// KnightyCode.g:69:1: number returns [Node node] : Number ;
	[GrammarRule("number")]
	private Node number()
	{
		EnterRule_number();
		EnterRule("number", 8);
		TraceIn("number", 8);
		Node node = default(Node);


		IToken Number12 = default(IToken);

		try { DebugEnterRule(GrammarFileName, "number");
		DebugLocation(69, 1);
		try
		{
			// KnightyCode.g:70:2: ( Number )
			DebugEnterAlt(1);
			// KnightyCode.g:70:4: Number
			{
			DebugLocation(70, 4);
			Number12=(IToken)Match(input,Number,Follow._Number_in_number347); if (state.failed) return node;
			DebugLocation(71, 2);
			if (state.backtracking == 0)
			{
				 node = new NumberNode( (Number12!=null?Number12.Text:null) ); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("number", 8);
			LeaveRule("number", 8);
			LeaveRule_number();
		}
		DebugLocation(72, 1);
		} finally { DebugExitRule(GrammarFileName, "number"); }
		return node;

	}
	// $ANTLR end "number"

	partial void EnterRule_ifExp();
	partial void LeaveRule_ifExp();
	// $ANTLR start "ifExp"
	// KnightyCode.g:78:1: ifExp returns [IfNode node] : If con= exp '{' true_body= exp '}' ( Else '{' false_body= exp '}' )? ;
	[GrammarRule("ifExp")]
	private IfNode ifExp()
	{
		EnterRule_ifExp();
		EnterRule("ifExp", 9);
		TraceIn("ifExp", 9);
		IfNode node = default(IfNode);


		Node con = default(Node);
		Node true_body = default(Node);
		Node false_body = default(Node);

		try { DebugEnterRule(GrammarFileName, "ifExp");
		DebugLocation(78, 1);
		try
		{
			// KnightyCode.g:79:2: ( If con= exp '{' true_body= exp '}' ( Else '{' false_body= exp '}' )? )
			DebugEnterAlt(1);
			// KnightyCode.g:79:4: If con= exp '{' true_body= exp '}' ( Else '{' false_body= exp '}' )?
			{
			DebugLocation(79, 4);
			Match(input,If,Follow._If_in_ifExp371); if (state.failed) return node;
			DebugLocation(79, 10);
			PushFollow(Follow._exp_in_ifExp375);
			con=exp();
			PopFollow();
			if (state.failed) return node;
			DebugLocation(79, 15);
			if (state.backtracking == 0)
			{
				 node = new IfNode( con ); 
			}
			DebugLocation(80, 2);
			Match(input,19,Follow._19_in_ifExp380); if (state.failed) return node;
			DebugLocation(80, 15);
			PushFollow(Follow._exp_in_ifExp384);
			true_body=exp();
			PopFollow();
			if (state.failed) return node;
			DebugLocation(80, 20);
			Match(input,20,Follow._20_in_ifExp386); if (state.failed) return node;
			DebugLocation(80, 24);
			if (state.backtracking == 0)
			{
				 node.True = true_body; 
			}
			DebugLocation(81, 2);
			// KnightyCode.g:81:2: ( Else '{' false_body= exp '}' )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==Else))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// KnightyCode.g:81:4: Else '{' false_body= exp '}'
				{
				DebugLocation(81, 4);
				Match(input,Else,Follow._Else_in_ifExp393); if (state.failed) return node;
				DebugLocation(81, 9);
				Match(input,19,Follow._19_in_ifExp395); if (state.failed) return node;
				DebugLocation(81, 23);
				PushFollow(Follow._exp_in_ifExp399);
				false_body=exp();
				PopFollow();
				if (state.failed) return node;
				DebugLocation(81, 28);
				Match(input,20,Follow._20_in_ifExp401); if (state.failed) return node;
				DebugLocation(81, 32);
				if (state.backtracking == 0)
				{
					 node.False = false_body; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(8); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ifExp", 9);
			LeaveRule("ifExp", 9);
			LeaveRule_ifExp();
		}
		DebugLocation(82, 1);
		} finally { DebugExitRule(GrammarFileName, "ifExp"); }
		return node;

	}
	// $ANTLR end "ifExp"

	partial void EnterRule_whileExp();
	partial void LeaveRule_whileExp();
	// $ANTLR start "whileExp"
	// KnightyCode.g:84:1: whileExp returns [WhileNode node] : While con= exp '{' body= exp '}' ;
	[GrammarRule("whileExp")]
	private WhileNode whileExp()
	{
		EnterRule_whileExp();
		EnterRule("whileExp", 10);
		TraceIn("whileExp", 10);
		WhileNode node = default(WhileNode);


		Node con = default(Node);
		Node body = default(Node);

		try { DebugEnterRule(GrammarFileName, "whileExp");
		DebugLocation(84, 1);
		try
		{
			// KnightyCode.g:85:2: ( While con= exp '{' body= exp '}' )
			DebugEnterAlt(1);
			// KnightyCode.g:85:4: While con= exp '{' body= exp '}'
			{
			DebugLocation(85, 4);
			Match(input,While,Follow._While_in_whileExp421); if (state.failed) return node;
			DebugLocation(85, 13);
			PushFollow(Follow._exp_in_whileExp425);
			con=exp();
			PopFollow();
			if (state.failed) return node;
			DebugLocation(85, 18);
			if (state.backtracking == 0)
			{
				 node = new WhileNode( con ); 
			}
			DebugLocation(86, 2);
			Match(input,19,Follow._19_in_whileExp430); if (state.failed) return node;
			DebugLocation(86, 10);
			PushFollow(Follow._exp_in_whileExp434);
			body=exp();
			PopFollow();
			if (state.failed) return node;
			DebugLocation(86, 15);
			Match(input,20,Follow._20_in_whileExp436); if (state.failed) return node;
			DebugLocation(86, 19);
			if (state.backtracking == 0)
			{
				 node.Body = body; 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("whileExp", 10);
			LeaveRule("whileExp", 10);
			LeaveRule_whileExp();
		}
		DebugLocation(87, 1);
		} finally { DebugExitRule(GrammarFileName, "whileExp"); }
		return node;

	}
	// $ANTLR end "whileExp"

	partial void EnterRule_synpred1_KnightyCode_fragment();
	partial void LeaveRule_synpred1_KnightyCode_fragment();

	// $ANTLR start synpred1_KnightyCode
	public void synpred1_KnightyCode_fragment()
	{
		EnterRule_synpred1_KnightyCode_fragment();
		EnterRule("synpred1_KnightyCode_fragment", 11);
		TraceIn("synpred1_KnightyCode_fragment", 11);
		try
		{
			// KnightyCode.g:37:3: ( printExp )
			DebugEnterAlt(1);
			// KnightyCode.g:37:3: printExp
			{
			DebugLocation(37, 3);
			PushFollow(Follow._printExp_in_synpred1_KnightyCode110);
			printExp();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_KnightyCode_fragment", 11);
			LeaveRule("synpred1_KnightyCode_fragment", 11);
			LeaveRule_synpred1_KnightyCode_fragment();
		}
	}
	// $ANTLR end synpred1_KnightyCode

	partial void EnterRule_synpred6_KnightyCode_fragment();
	partial void LeaveRule_synpred6_KnightyCode_fragment();

	// $ANTLR start synpred6_KnightyCode
	public void synpred6_KnightyCode_fragment()
	{
		IToken op = default(IToken);
		Node lhs = default(Node);
		Node rhs = default(Node);

		EnterRule_synpred6_KnightyCode_fragment();
		EnterRule("synpred6_KnightyCode_fragment", 16);
		TraceIn("synpred6_KnightyCode_fragment", 16);
		try
		{
			// KnightyCode.g:49:6: (lhs= mulExp op= ( '+' | '-' ) rhs= addExp )
			DebugEnterAlt(1);
			// KnightyCode.g:49:6: lhs= mulExp op= ( '+' | '-' ) rhs= addExp
			{
			DebugLocation(49, 9);
			PushFollow(Follow._mulExp_in_synpred6_KnightyCode194);
			lhs=mulExp();
			PopFollow();
			if (state.failed) return;
			DebugLocation(49, 19);

			op=(IToken)input.LT(1);
			if ((input.LA(1)>=15 && input.LA(1)<=16))
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(49, 35);
			PushFollow(Follow._addExp_in_synpred6_KnightyCode208);
			rhs=addExp();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_KnightyCode_fragment", 16);
			LeaveRule("synpred6_KnightyCode_fragment", 16);
			LeaveRule_synpred6_KnightyCode_fragment();
		}
	}
	// $ANTLR end synpred6_KnightyCode

	partial void EnterRule_synpred8_KnightyCode_fragment();
	partial void LeaveRule_synpred8_KnightyCode_fragment();

	// $ANTLR start synpred8_KnightyCode
	public void synpred8_KnightyCode_fragment()
	{
		IToken op = default(IToken);
		Node lhs = default(Node);
		Node rhs = default(Node);

		EnterRule_synpred8_KnightyCode_fragment();
		EnterRule("synpred8_KnightyCode_fragment", 18);
		TraceIn("synpred8_KnightyCode_fragment", 18);
		try
		{
			// KnightyCode.g:54:6: (lhs= unaryExp op= ( '*' | '/' ) rhs= mulExp )
			DebugEnterAlt(1);
			// KnightyCode.g:54:6: lhs= unaryExp op= ( '*' | '/' ) rhs= mulExp
			{
			DebugLocation(54, 9);
			PushFollow(Follow._unaryExp_in_synpred8_KnightyCode238);
			lhs=unaryExp();
			PopFollow();
			if (state.failed) return;
			DebugLocation(54, 21);

			op=(IToken)input.LT(1);
			if (input.LA(1)==14||input.LA(1)==17)
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(54, 37);
			PushFollow(Follow._mulExp_in_synpred8_KnightyCode252);
			rhs=mulExp();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred8_KnightyCode_fragment", 18);
			LeaveRule("synpred8_KnightyCode_fragment", 18);
			LeaveRule_synpred8_KnightyCode_fragment();
		}
	}
	// $ANTLR end synpred8_KnightyCode
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _exp_in_parse84 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse86 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExp_in_exp110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExp_in_exp123 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_exp127 = new BitSet(new ulong[]{0x1AE2UL});
		public static readonly BitSet _Space_in_exp129 = new BitSet(new ulong[]{0x18E2UL});
		public static readonly BitSet _printExp_in_exp138 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_exp142 = new BitSet(new ulong[]{0x18E2UL});
		public static readonly BitSet _Print_in_printExp162 = new BitSet(new ulong[]{0x200UL});
		public static readonly BitSet _Space_in_printExp164 = new BitSet(new ulong[]{0x1860UL});
		public static readonly BitSet _addExp_in_printExp166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _addExp_in_printExp173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mulExp_in_addExp194 = new BitSet(new ulong[]{0x18000UL});
		public static readonly BitSet _set_in_addExp198 = new BitSet(new ulong[]{0x1860UL});
		public static readonly BitSet _addExp_in_addExp208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mulExp_in_addExp216 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExp_in_mulExp238 = new BitSet(new ulong[]{0x24000UL});
		public static readonly BitSet _set_in_mulExp242 = new BitSet(new ulong[]{0x1860UL});
		public static readonly BitSet _mulExp_in_mulExp252 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExp_in_mulExp260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_unaryExp280 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _number_in_literal300 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifExp_in_literal308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileExp_in_literal316 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _12_in_literal325 = new BitSet(new ulong[]{0x18E0UL});
		public static readonly BitSet _exp_in_literal327 = new BitSet(new ulong[]{0x2000UL});
		public static readonly BitSet _13_in_literal329 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _Number_in_number347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _If_in_ifExp371 = new BitSet(new ulong[]{0x18E0UL});
		public static readonly BitSet _exp_in_ifExp375 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_ifExp380 = new BitSet(new ulong[]{0x18E0UL});
		public static readonly BitSet _exp_in_ifExp384 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _20_in_ifExp386 = new BitSet(new ulong[]{0x12UL});
		public static readonly BitSet _Else_in_ifExp393 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_ifExp395 = new BitSet(new ulong[]{0x18E0UL});
		public static readonly BitSet _exp_in_ifExp399 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _20_in_ifExp401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _While_in_whileExp421 = new BitSet(new ulong[]{0x18E0UL});
		public static readonly BitSet _exp_in_whileExp425 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_whileExp430 = new BitSet(new ulong[]{0x18E0UL});
		public static readonly BitSet _exp_in_whileExp434 = new BitSet(new ulong[]{0x100000UL});
		public static readonly BitSet _20_in_whileExp436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _printExp_in_synpred1_KnightyCode110 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _mulExp_in_synpred6_KnightyCode194 = new BitSet(new ulong[]{0x18000UL});
		public static readonly BitSet _set_in_synpred6_KnightyCode198 = new BitSet(new ulong[]{0x1860UL});
		public static readonly BitSet _addExp_in_synpred6_KnightyCode208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExp_in_synpred8_KnightyCode238 = new BitSet(new ulong[]{0x24000UL});
		public static readonly BitSet _set_in_synpred8_KnightyCode242 = new BitSet(new ulong[]{0x1860UL});
		public static readonly BitSet _mulExp_in_synpred8_KnightyCode252 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  KnightyCode 
