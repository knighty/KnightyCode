//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 KnightyCodeParser.g 2012-04-30 14:16:22

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class KnightyCodeParserParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "NUMBER", "PLUS"
	};
	public const int EOF=-1;
	public const int NUMBER=4;
	public const int PLUS=5;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public KnightyCodeParserParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public KnightyCodeParserParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return KnightyCodeParserParser.tokenNames; } }
	public override string GrammarFileName { get { return "KnightyCodeParser.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_add() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_add() {}
	// $ANTLR start "add"
	// KnightyCodeParser.g:7:1: add : NUMBER PLUS NUMBER ;
	[GrammarRule("add")]
	private void add()
	{
		EnterRule_add();
		EnterRule("add", 1);
		TraceIn("add", 1);
		try { DebugEnterRule(GrammarFileName, "add");
		DebugLocation(7, 24);
		try
		{
			// KnightyCodeParser.g:7:5: ( NUMBER PLUS NUMBER )
			DebugEnterAlt(1);
			// KnightyCodeParser.g:7:7: NUMBER PLUS NUMBER
			{
			DebugLocation(7, 7);
			Match(input,NUMBER,Follow._NUMBER_in_add22); 
			DebugLocation(7, 14);
			Match(input,PLUS,Follow._PLUS_in_add24); 
			DebugLocation(7, 19);
			Match(input,NUMBER,Follow._NUMBER_in_add26); 

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("add", 1);
			LeaveRule("add", 1);
			LeaveRule_add();
	    }
	 	DebugLocation(7, 24);
		} finally { DebugExitRule(GrammarFileName, "add"); }
		return;

	}
	// $ANTLR end "add"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NUMBER_in_add22 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _PLUS_in_add24 = new BitSet(new ulong[]{0x10UL});
		public static readonly BitSet _NUMBER_in_add26 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}
